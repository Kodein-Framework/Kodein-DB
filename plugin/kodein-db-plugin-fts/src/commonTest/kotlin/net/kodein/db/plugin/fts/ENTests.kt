package net.kodein.db.plugin.fts

import net.kodein.db.plugin.fts.lang.enStemmer
import net.kodein.db.plugin.fts.lang.frStemmer
import kotlin.test.Test
import kotlin.test.assertEquals

class ENTests {

    private val words = listOf(
            "consign",
            "consigned",
            "consigning",
            "consignment",
            "consist",
            "consisted",
            "consistency",
            "consistent",
            "consistently",
            "consisting",
            "consists",
            "consolation",
            "consolations",
            "consolatory",
            "console",
            "consoled",
            "consoles",
            "consolidate",
            "consolidated",
            "consolidating",
            "consoling",
            "consolingly",
            "consols",
            "consonant",
            "consort",
            "consorted",
            "consorting",
            "conspicuous",
            "conspicuously",
            "conspiracy",
            "conspirator",
            "conspirators",
            "conspire",
            "conspired",
            "conspiring",
            "constable",
            "constables",
            "constance",
            "constancy",
            "constant",
            "knack",
            "knackeries",
            "knacks",
            "knag",
            "knave",
            "knaves",
            "knavish",
            "kneaded",
            "kneading",
            "knee",
            "kneel",
            "kneeled",
            "kneeling",
            "kneels",
            "knees",
            "knell",
            "knelt",
            "knew",
            "knick",
            "knif",
            "knife",
            "knight",
            "knightly",
            "knights",
            "knit",
            "knits",
            "knitted",
            "knitting",
            "knives",
            "knob",
            "knobs",
            "knock",
            "knocked",
            "knocker",
            "knockers",
            "knocking",
            "knocks",
            "knopp",
            "knot",
            "knots",
            "generate",
            "generates",
            "generated",
            "generating",
            "general",
            "generally",
            "generic",
            "generically",
            "generous",
            "generously",
            "sky",
            "skies",
            "lie",
            "lying",
            "succeed",
            "succeeds"
    )

    private val stems = listOf(
            "consign",
            "consign",
            "consign",
            "consign",
            "consist",
            "consist",
            "consist",
            "consist",
            "consist",
            "consist",
            "consist",
            "consol",
            "consol",
            "consolatori",
            "consol",
            "consol",
            "consol",
            "consolid",
            "consolid",
            "consolid",
            "consol",
            "consol",
            "consol",
            "conson",
            "consort",
            "consort",
            "consort",
            "conspicu",
            "conspicu",
            "conspiraci",
            "conspir",
            "conspir",
            "conspir",
            "conspir",
            "conspir",
            "constabl",
            "constabl",
            "constanc",
            "constanc",
            "constant",
            "knack",
            "knackeri",
            "knack",
            "knag",
            "knave",
            "knave",
            "knavish",
            "knead",
            "knead",
            "knee",
            "kneel",
            "kneel",
            "kneel",
            "kneel",
            "knee",
            "knell",
            "knelt",
            "knew",
            "knick",
            "knif",
            "knife",
            "knight",
            "knight",
            "knight",
            "knit",
            "knit",
            "knit",
            "knit",
            "knive",
            "knob",
            "knob",
            "knock",
            "knock",
            "knocker",
            "knocker",
            "knock",
            "knock",
            "knopp",
            "knot",
            "knot",
            "generat",
            "generat",
            "generat",
            "generat",
            "general",
            "general",
            "generic",
            "generic",
            "generous",
            "generous",
            "sky",
            "sky",
            "lie",
            "lie",
            "succeed",
            "succeed"
    )

    @Test
    fun englishStems() {
        words.asSequence()
                .map { enStemmer.stemOf(it) }
                .forEachIndexed { index, stem ->
                    assertEquals(stems[index], stem, "Word \"${words[index]}\" stem:")
                }
    }

//    @Test
//    fun englishWord() {
//        assertEquals("knee", enStemmer.stemOf("knees"))
//    }

}
