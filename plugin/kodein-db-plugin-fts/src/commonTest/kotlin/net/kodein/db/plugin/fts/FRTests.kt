package net.kodein.db.plugin.fts

import net.kodein.db.plugin.fts.lang.FR
import net.kodein.db.plugin.fts.lang.FRUnaccented
import kotlin.test.Test
import kotlin.test.assertEquals

class FRTests {

    private val words = listOf(
            "continu",
            "continua",
            "continuait",
            "continuant",
            "continuation",
            "continue",
            "continué",
            "continuel",
            "continuelle",
            "continuellement",
            "continuelles",
            "continuels",
            "continuer",
            "continuera",
            "continuerait",
            "continueront",
            "continuez",
            "continuité",
            "continuons",
            "contorsions",
            "contour",
            "contournait",
            "contournant",
            "contourne",
            "contours",
            "contractait",
            "contracté",
            "contractée",
            "contracter",
            "contractés",
            "contractions",
            "contradictoirement",
            "contradictoires",
            "contraindre",
            "contraint",
            "contrainte",
            "contraintes",
            "contraire",
            "contraires",
            "contraria",
            "main",
            "mains",
            "maintenaient",
            "maintenait",
            "maintenant",
            "maintenir",
            "maintenue",
            "maintien",
            "maintint",
            "maire",
            "maires",
            "mairie",
            "mais",
            "maïs",
            "maison",
            "maisons",
            "maistre",
            "maitre",
            "maître",
            "maîtres",
            "maîtresse",
            "maîtresses",
            "majesté",
            "majestueuse",
            "majestueusement",
            "majestueux",
            "majeur",
            "majeure",
            "major",
            "majordome",
            "majordomes",
            "majorité",
            "majorités",
            "mal",
            "malacca",
            "malade",
            "malades",
            "maladie",
            "maladies",
            "maladive"
    )

    private val stems = listOf(
            "continu",
            "continu",
            "continu",
            "continu",
            "continu",
            "continu",
            "continu",
            "continuel",
            "continuel",
            "continuel",
            "continuel",
            "continuel",
            "continu",
            "continu",
            "continu",
            "continu",
            "continu",
            "continu",
            "continuon",
            "contors",
            "contour",
            "contourn",
            "contourn",
            "contourn",
            "contour",
            "contract",
            "contract",
            "contract",
            "contract",
            "contract",
            "contract",
            "contradictoir",
            "contradictoir",
            "contraindr",
            "contraint",
            "contraint",
            "contraint",
            "contrair",
            "contrair",
            "contrari",
            "main",
            "main",
            "mainten",
            "mainten",
            "mainten",
            "mainten",
            "maintenu",
            "maintien",
            "maintint",
            "mair",
            "mair",
            "mair",
            "mais",
            "maï",
            "maison",
            "maison",
            "maistr",
            "maitr",
            "maîtr",
            "maîtr",
            "maîtress",
            "maîtress",
            "majest",
            "majestu",
            "majestu",
            "majestu",
            "majeur",
            "majeur",
            "major",
            "majordom",
            "majordom",
            "major",
            "major",
            "mal",
            "malacc",
            "malad",
            "malad",
            "malad",
            "malad",
            "malad"
    )

    private val uaStems = listOf(
            "continu",
            "continu",
            "continu",
            "continu",
            "continu",
            "continu",
            "continu",
            "continuel",
            "continuel",
            "continuel",
            "continuel",
            "continuel",
            "continu",
            "continu",
            "continu",
            "continu",
            "continu",
            "continu",
            "continuon",
            "contors",
            "contour",
            "contourn",
            "contourn",
            "contourn",
            "contour",
            "contract",
            "contract",
            "contract",
            "contract",
            "contract",
            "contract",
            "contradictoir",
            "contradictoir",
            "contraindr",
            "contraint",
            "contraint",
            "contraint",
            "contrair",
            "contrair",
            "contrari",
            "main",
            "main",
            "mainten",
            "mainten",
            "mainten",
            "mainten",
            "maintenu",
            "maintien",
            "maintint",
            "mair",
            "mair",
            "mair",
            "mais",
            "mais",
            "maison",
            "maison",
            "maistr",
            "maitr",
            "maitr",
            "maitr",
            "maitress",
            "maitress",
            "majest",
            "majestu",
            "majestu",
            "majestu",
            "majeur",
            "majeur",
            "major",
            "majordom",
            "majordom",
            "major",
            "major",
            "mal",
            "malacc",
            "malad",
            "malad",
            "malad",
            "malad",
            "malad"
    )


    @Test
    fun frenchStems() {
        words.asSequence()
                .map { FR.stemmer.stemOf(it) }
                .forEachIndexed { index, stem ->
                    assertEquals(stems[index], stem, "Word \"${words[index]}\" stem:")
                }
    }

    @Test
    fun frenchUnaccentedStems() {
        words.asSequence()
                .unaccented(FR.accentsMap)
                .map { FRUnaccented.stemmer.stemOf(it) }
                .forEachIndexed { index, stem ->
                    assertEquals(uaStems[index], stem, "Word \"${words[index]}\" stem:")
                }
    }

}
