// This file was generated automatically by the Snowball to Java compiler
package org.kodein.db.plugin.fts.stemmer

/**
 * This class was automatically generated by a Snowball to Java compiler
 * It implements the stemming algorithm defined by a snowball script.
 */
@Suppress("UNREACHABLE_CODE")
internal class RomanianStemmer : SnowballProgram() {
    private var B_standard_suffix_removed = false
    private var I_p2 = 0
    private var I_p1 = 0
    private var I_pV = 0

    private fun r_prelude(): Boolean {
        var v_1: Int
        var v_2: Int
        var v_3: Int
        // (, line 31
        // repeat, line 32
        replab0@ while (true) {
            v_1 = cursor
            lab1@ do {
                // goto, line 32
                golab2@ while (true) {
                    v_2 = cursor
                    lab3@ do {
                        // (, line 32
                        if (!in_grouping(g_v, 97, 259)) {
                            break@lab3
                        }
                        // [, line 33
                        bra = cursor
                        // or, line 33
                        lab4@ do {
                            v_3 = cursor
                            lab5@ do {
                                // (, line 33
                                // literal, line 33
                                if (!eq_s(1, "u")) {
                                    break@lab5
                                }
                                // ], line 33
                                ket = cursor
                                if (!in_grouping(g_v, 97, 259)) {
                                    break@lab5
                                }
                                // <-, line 33
                                slice_from("U")
                                break@lab4
                            } while (false)
                            cursor = v_3
                            // (, line 34
                            // literal, line 34
                            if (!eq_s(1, "i")) {
                                break@lab3
                            }
                            // ], line 34
                            ket = cursor
                            if (!in_grouping(g_v, 97, 259)) {
                                break@lab3
                            }
                            // <-, line 34
                            slice_from("I")
                        } while (false)
                        cursor = v_2
                        break@golab2
                    } while (false)
                    cursor = v_2
                    if (cursor >= limit) {
                        break@lab1
                    }
                    cursor++
                }
                continue@replab0
            } while (false)
            cursor = v_1
            break@replab0
        }
        return true
    }

    private fun r_mark_regions(): Boolean {
        val v_1: Int
        var v_2: Int
        var v_3: Int
        var v_6: Int
        val v_8: Int
        // (, line 38
        I_pV = limit
        I_p1 = limit
        I_p2 = limit
        // do, line 44
        v_1 = cursor
        lab0@ do {
            // (, line 44
            // or, line 46
            lab1@ do {
                v_2 = cursor
                lab2@ do {
                    // (, line 45
                    if (!in_grouping(g_v, 97, 259)) {
                        break@lab2
                    }
                    // or, line 45
                    lab3@ do {
                        v_3 = cursor
                        lab4@ do {
                            // (, line 45
                            if (!out_grouping(g_v, 97, 259)) {
                                break@lab4
                            }
                            // gopast, line 45
                            golab5@ while (true) {
                                lab6@ do {
                                    if (!in_grouping(g_v, 97, 259)) {
                                        break@lab6
                                    }
                                    break@golab5
                                } while (false)
                                if (cursor >= limit) {
                                    break@lab4
                                }
                                cursor++
                            }
                            break@lab3
                        } while (false)
                        cursor = v_3
                        // (, line 45
                        if (!in_grouping(g_v, 97, 259)) {
                            break@lab2
                        }
                        // gopast, line 45
                        golab7@ while (true) {
                            lab8@ do {
                                if (!out_grouping(g_v, 97, 259)) {
                                    break@lab8
                                }
                                break@golab7
                            } while (false)
                            if (cursor >= limit) {
                                break@lab2
                            }
                            cursor++
                        }
                    } while (false)
                    break@lab1
                } while (false)
                cursor = v_2
                // (, line 47
                if (!out_grouping(g_v, 97, 259)) {
                    break@lab0
                }
                // or, line 47
                lab9@ do {
                    v_6 = cursor
                    lab10@ do {
                        // (, line 47
                        if (!out_grouping(g_v, 97, 259)) {
                            break@lab10
                        }
                        // gopast, line 47
                        golab11@ while (true) {
                            lab12@ do {
                                if (!in_grouping(g_v, 97, 259)) {
                                    break@lab12
                                }
                                break@golab11
                            } while (false)
                            if (cursor >= limit) {
                                break@lab10
                            }
                            cursor++
                        }
                        break@lab9
                    } while (false)
                    cursor = v_6
                    // (, line 47
                    if (!in_grouping(g_v, 97, 259)) {
                        break@lab0
                    }
                    // next, line 47
                    if (cursor >= limit) {
                        break@lab0
                    }
                    cursor++
                } while (false)
            } while (false)
            // setmark pV, line 48
            I_pV = cursor
        } while (false)
        cursor = v_1
        // do, line 50
        v_8 = cursor
        lab13@ do {
            // (, line 50
            // gopast, line 51
            golab14@ while (true) {
                lab15@ do {
                    if (!in_grouping(g_v, 97, 259)) {
                        break@lab15
                    }
                    break@golab14
                } while (false)
                if (cursor >= limit) {
                    break@lab13
                }
                cursor++
            }
            // gopast, line 51
            golab16@ while (true) {
                lab17@ do {
                    if (!out_grouping(g_v, 97, 259)) {
                        break@lab17
                    }
                    break@golab16
                } while (false)
                if (cursor >= limit) {
                    break@lab13
                }
                cursor++
            }
            // setmark p1, line 51
            I_p1 = cursor
            // gopast, line 52
            golab18@ while (true) {
                lab19@ do {
                    if (!in_grouping(g_v, 97, 259)) {
                        break@lab19
                    }
                    break@golab18
                } while (false)
                if (cursor >= limit) {
                    break@lab13
                }
                cursor++
            }
            // gopast, line 52
            golab20@ while (true) {
                lab21@ do {
                    if (!out_grouping(g_v, 97, 259)) {
                        break@lab21
                    }
                    break@golab20
                } while (false)
                if (cursor >= limit) {
                    break@lab13
                }
                cursor++
            }
            // setmark p2, line 52
            I_p2 = cursor
        } while (false)
        cursor = v_8
        return true
    }

    private fun r_postlude(): Boolean {
        var among_var: Int
        var v_1: Int
        // repeat, line 56
        replab0@ while (true) {
            v_1 = cursor
            lab1@ do {
                // (, line 56
                // [, line 58
                bra = cursor
                // substring, line 58
                among_var = find_among(a_0, 3)
                if (among_var == 0) {
                    break@lab1
                }
                // ], line 58
                ket = cursor
                when (among_var) {
                    0 -> break@lab1
                    1 ->                                     // (, line 59
                        // <-, line 59
                        slice_from("i")
                    2 ->                                     // (, line 60
                        // <-, line 60
                        slice_from("u")
                    3 -> {
                        // (, line 61
                        // next, line 61
                        if (cursor >= limit) {
                            break@lab1
                        }
                        cursor++
                    }
                }
                continue@replab0
            } while (false)
            cursor = v_1
            break@replab0
        }
        return true
    }

    private fun r_RV(): Boolean {
        return if (I_pV > cursor) {
            false
        } else true
    }

    private fun r_R1(): Boolean {
        return if (I_p1 > cursor) {
            false
        } else true
    }

    private fun r_R2(): Boolean {
        return if (I_p2 > cursor) {
            false
        } else true
    }

    private fun r_step_0(): Boolean {
        val among_var: Int
        var v_1: Int
        // (, line 72
        // [, line 73
        ket = cursor
        // substring, line 73
        among_var = find_among_b(a_1, 16)
        if (among_var == 0) {
            return false
        }
        // ], line 73
        bra = cursor
        // call R1, line 73
        if (!r_R1()) {
            return false
        }
        when (among_var) {
            0 -> return false
            1 ->                             // (, line 75
                // delete, line 75
                slice_del()
            2 ->                             // (, line 77
                // <-, line 77
                slice_from("a")
            3 ->                             // (, line 79
                // <-, line 79
                slice_from("e")
            4 ->                             // (, line 81
                // <-, line 81
                slice_from("i")
            5 -> {
                run {
                    v_1 = limit - cursor
                    lab0@ do {
                        // literal, line 83
                        if (!eq_s_b(2, "ab")) {
                            break@lab0
                        }
                        return false
                    } while (false)
                    cursor = limit - v_1
                }
                // <-, line 83
                slice_from("i")
            }
            6 ->                             // (, line 85
                // <-, line 85
                slice_from("at")
            7 ->                             // (, line 87
                // <-, line 87
                slice_from("a\u0163i")
        }
        return true
    }

    private fun r_combo_suffix(): Boolean {
        val among_var: Int
        val v_1: Int
        // test, line 91
        v_1 = limit - cursor
        // (, line 91
        // [, line 92
        ket = cursor
        // substring, line 92
        among_var = find_among_b(a_2, 46)
        if (among_var == 0) {
            return false
        }
        // ], line 92
        bra = cursor
        // call R1, line 92
        if (!r_R1()) {
            return false
        }
        when (among_var) {
            0 -> return false
            1 ->                             // (, line 100
                // <-, line 101
                slice_from("abil")
            2 ->                             // (, line 103
                // <-, line 104
                slice_from("ibil")
            3 ->                             // (, line 106
                // <-, line 107
                slice_from("iv")
            4 ->                             // (, line 112
                // <-, line 113
                slice_from("ic")
            5 ->                             // (, line 117
                // <-, line 118
                slice_from("at")
            6 ->                             // (, line 121
                // <-, line 122
                slice_from("it")
        }
        // set standard_suffix_removed, line 125
        B_standard_suffix_removed = true
        cursor = limit - v_1
        return true
    }

    private fun r_standard_suffix(): Boolean {
        val among_var: Int
        var v_1: Int
        // (, line 129
        // unset standard_suffix_removed, line 130
        B_standard_suffix_removed = false
        // repeat, line 131
        replab0@ while (true) {
            v_1 = limit - cursor
            lab1@ do {
                // call combo_suffix, line 131
                if (!r_combo_suffix()) {
                    break@lab1
                }
                continue@replab0
            } while (false)
            cursor = limit - v_1
            break@replab0
        }
        // [, line 132
        ket = cursor
        // substring, line 132
        among_var = find_among_b(a_3, 62)
        if (among_var == 0) {
            return false
        }
        // ], line 132
        bra = cursor
        // call R2, line 132
        if (!r_R2()) {
            return false
        }
        when (among_var) {
            0 -> return false
            1 ->                             // (, line 148
                // delete, line 149
                slice_del()
            2 -> {
                // (, line 151
                // literal, line 152
                if (!eq_s_b(1, "\u0163")) {
                    return false
                }
                // ], line 152
                bra = cursor
                // <-, line 152
                slice_from("t")
            }
            3 ->                             // (, line 155
                // <-, line 156
                slice_from("ist")
        }
        // set standard_suffix_removed, line 160
        B_standard_suffix_removed = true
        return true
    }

    private fun r_verb_suffix(): Boolean {
        val among_var: Int
        val v_1: Int
        val v_2: Int
        var v_3: Int
        // setlimit, line 164
        v_1 = limit - cursor
        // tomark, line 164
        if (cursor < I_pV) {
            return false
        }
        cursor = I_pV
        v_2 = limit_backward
        limit_backward = cursor
        cursor = limit - v_1
        // (, line 164
        // [, line 165
        ket = cursor
        // substring, line 165
        among_var = find_among_b(a_4, 94)
        if (among_var == 0) {
            limit_backward = v_2
            return false
        }
        // ], line 165
        bra = cursor
        when (among_var) {
            0 -> {
                limit_backward = v_2
                return false
            }
            1 -> {
                // (, line 200
                // or, line 200
                lab0@ do {
                    v_3 = limit - cursor
                    lab1@ do {
                        if (!out_grouping_b(g_v, 97, 259)) {
                            break@lab1
                        }
                        break@lab0
                    } while (false)
                    cursor = limit - v_3
                    // literal, line 200
                    if (!eq_s_b(1, "u")) {
                        limit_backward = v_2
                        return false
                    }
                } while (false)
                // delete, line 200
                slice_del()
            }
            2 ->                             // (, line 214
                // delete, line 214
                slice_del()
        }
        limit_backward = v_2
        return true
    }

    private fun r_vowel_suffix(): Boolean {
        val among_var: Int
        // (, line 218
        // [, line 219
        ket = cursor
        // substring, line 219
        among_var = find_among_b(a_5, 5)
        if (among_var == 0) {
            return false
        }
        // ], line 219
        bra = cursor
        // call RV, line 219
        if (!r_RV()) {
            return false
        }
        when (among_var) {
            0 -> return false
            1 ->                             // (, line 220
                // delete, line 220
                slice_del()
        }
        return true
    }

    override fun stem(): Boolean {
        val v_1: Int
        val v_2: Int
        val v_3: Int
        val v_4: Int
        val v_5: Int
        var v_6: Int
        val v_7: Int
        val v_8: Int
        // (, line 225
        // do, line 226
        v_1 = cursor
        lab0@ do {
            // call prelude, line 226
            if (!r_prelude()) {
                break@lab0
            }
        } while (false)
        cursor = v_1
        // do, line 227
        v_2 = cursor
        lab1@ do {
            // call mark_regions, line 227
            if (!r_mark_regions()) {
                break@lab1
            }
        } while (false)
        cursor = v_2
        // backwards, line 228
        limit_backward = cursor
        cursor = limit
        // (, line 228
        // do, line 229
        v_3 = limit - cursor
        lab2@ do {
            // call step_0, line 229
            if (!r_step_0()) {
                break@lab2
            }
        } while (false)
        cursor = limit - v_3
        // do, line 230
        v_4 = limit - cursor
        lab3@ do {
            // call standard_suffix, line 230
            if (!r_standard_suffix()) {
                break@lab3
            }
        } while (false)
        cursor = limit - v_4
        // do, line 231
        v_5 = limit - cursor
        lab4@ do {
            // (, line 231
            // or, line 231
            lab5@ do {
                v_6 = limit - cursor
                lab6@ do {
                    // Boolean test standard_suffix_removed, line 231
                    if (!B_standard_suffix_removed) {
                        break@lab6
                    }
                    break@lab5
                } while (false)
                cursor = limit - v_6
                // call verb_suffix, line 231
                if (!r_verb_suffix()) {
                    break@lab4
                }
            } while (false)
        } while (false)
        cursor = limit - v_5
        // do, line 232
        v_7 = limit - cursor
        lab7@ do {
            // call vowel_suffix, line 232
            if (!r_vowel_suffix()) {
                break@lab7
            }
        } while (false)
        cursor = limit - v_7
        cursor = limit_backward // do, line 234
        v_8 = cursor
        lab8@ do {
            // call postlude, line 234
            if (!r_postlude()) {
                break@lab8
            }
        } while (false)
        cursor = v_8
        return true
    }

    override fun equals(other: Any?): Boolean {
        return other is RomanianStemmer
    }

    override fun hashCode(): Int {
        return RomanianStemmer::class.qualifiedName.hashCode()
    }

    companion object {
        private val a_0: Array<Among> = arrayOf<Among>(
            Among("", -1, 3),
            Among("I", 0, 1),
            Among("U", 0, 2)
        )
        private val a_1: Array<Among> = arrayOf<Among>(
            Among("ea", -1, 3),
            Among("a\u0163ia", -1, 7),
            Among("aua", -1, 2),
            Among("iua", -1, 4),
            Among("a\u0163ie", -1, 7),
            Among("ele", -1, 3),
            Among("ile", -1, 5),
            Among("iile", 6, 4),
            Among("iei", -1, 4),
            Among("atei", -1, 6),
            Among("ii", -1, 4),
            Among("ului", -1, 1),
            Among("ul", -1, 1),
            Among("elor", -1, 3),
            Among("ilor", -1, 4),
            Among("iilor", 14, 4)
        )
        private val a_2: Array<Among> = arrayOf<Among>(
            Among("icala", -1, 4),
            Among("iciva", -1, 4),
            Among("ativa", -1, 5),
            Among("itiva", -1, 6),
            Among("icale", -1, 4),
            Among("a\u0163iune", -1, 5),
            Among("i\u0163iune", -1, 6),
            Among("atoare", -1, 5),
            Among("itoare", -1, 6),
            Among("\u0103toare", -1, 5),
            Among("icitate", -1, 4),
            Among("abilitate", -1, 1),
            Among("ibilitate", -1, 2),
            Among("ivitate", -1, 3),
            Among("icive", -1, 4),
            Among("ative", -1, 5),
            Among("itive", -1, 6),
            Among("icali", -1, 4),
            Among("atori", -1, 5),
            Among("icatori", 18, 4),
            Among("itori", -1, 6),
            Among("\u0103tori", -1, 5),
            Among("icitati", -1, 4),
            Among("abilitati", -1, 1),
            Among("ivitati", -1, 3),
            Among("icivi", -1, 4),
            Among("ativi", -1, 5),
            Among("itivi", -1, 6),
            Among("icit\u0103i", -1, 4),
            Among("abilit\u0103i", -1, 1),
            Among("ivit\u0103i", -1, 3),
            Among("icit\u0103\u0163i", -1, 4),
            Among("abilit\u0103\u0163i", -1, 1),
            Among("ivit\u0103\u0163i", -1, 3),
            Among("ical", -1, 4),
            Among("ator", -1, 5),
            Among("icator", 35, 4),
            Among("itor", -1, 6),
            Among("\u0103tor", -1, 5),
            Among("iciv", -1, 4),
            Among("ativ", -1, 5),
            Among("itiv", -1, 6),
            Among("ical\u0103", -1, 4),
            Among("iciv\u0103", -1, 4),
            Among("ativ\u0103", -1, 5),
            Among("itiv\u0103", -1, 6)
        )
        private val a_3: Array<Among> = arrayOf<Among>(
            Among("ica", -1, 1),
            Among("abila", -1, 1),
            Among("ibila", -1, 1),
            Among("oasa", -1, 1),
            Among("ata", -1, 1),
            Among("ita", -1, 1),
            Among("anta", -1, 1),
            Among("ista", -1, 3),
            Among("uta", -1, 1),
            Among("iva", -1, 1),
            Among("ic", -1, 1),
            Among("ice", -1, 1),
            Among("abile", -1, 1),
            Among("ibile", -1, 1),
            Among("isme", -1, 3),
            Among("iune", -1, 2),
            Among("oase", -1, 1),
            Among("ate", -1, 1),
            Among("itate", 17, 1),
            Among("ite", -1, 1),
            Among("ante", -1, 1),
            Among("iste", -1, 3),
            Among("ute", -1, 1),
            Among("ive", -1, 1),
            Among("ici", -1, 1),
            Among("abili", -1, 1),
            Among("ibili", -1, 1),
            Among("iuni", -1, 2),
            Among("atori", -1, 1),
            Among("osi", -1, 1),
            Among("ati", -1, 1),
            Among("itati", 30, 1),
            Among("iti", -1, 1),
            Among("anti", -1, 1),
            Among("isti", -1, 3),
            Among("uti", -1, 1),
            Among("i\u015Fti", -1, 3),
            Among("ivi", -1, 1),
            Among("it\u0103i", -1, 1),
            Among("o\u015Fi", -1, 1),
            Among("it\u0103\u0163i", -1, 1),
            Among("abil", -1, 1),
            Among("ibil", -1, 1),
            Among("ism", -1, 3),
            Among("ator", -1, 1),
            Among("os", -1, 1),
            Among("at", -1, 1),
            Among("it", -1, 1),
            Among("ant", -1, 1),
            Among("ist", -1, 3),
            Among("ut", -1, 1),
            Among("iv", -1, 1),
            Among("ic\u0103", -1, 1),
            Among("abil\u0103", -1, 1),
            Among("ibil\u0103", -1, 1),
            Among("oas\u0103", -1, 1),
            Among("at\u0103", -1, 1),
            Among("it\u0103", -1, 1),
            Among("ant\u0103", -1, 1),
            Among("ist\u0103", -1, 3),
            Among("ut\u0103", -1, 1),
            Among("iv\u0103", -1, 1)
        )
        private val a_4: Array<Among> = arrayOf<Among>(
            Among("ea", -1, 1),
            Among("ia", -1, 1),
            Among("esc", -1, 1),
            Among("\u0103sc", -1, 1),
            Among("ind", -1, 1),
            Among("\u00E2nd", -1, 1),
            Among("are", -1, 1),
            Among("ere", -1, 1),
            Among("ire", -1, 1),
            Among("\u00E2re", -1, 1),
            Among("se", -1, 2),
            Among("ase", 10, 1),
            Among("sese", 10, 2),
            Among("ise", 10, 1),
            Among("use", 10, 1),
            Among("\u00E2se", 10, 1),
            Among("e\u015Fte", -1, 1),
            Among("\u0103\u015Fte", -1, 1),
            Among("eze", -1, 1),
            Among("ai", -1, 1),
            Among("eai", 19, 1),
            Among("iai", 19, 1),
            Among("sei", -1, 2),
            Among("e\u015Fti", -1, 1),
            Among("\u0103\u015Fti", -1, 1),
            Among("ui", -1, 1),
            Among("ezi", -1, 1),
            Among("\u00E2i", -1, 1),
            Among("a\u015Fi", -1, 1),
            Among("se\u015Fi", -1, 2),
            Among("ase\u015Fi", 29, 1),
            Among("sese\u015Fi", 29, 2),
            Among("ise\u015Fi", 29, 1),
            Among("use\u015Fi", 29, 1),
            Among("\u00E2se\u015Fi", 29, 1),
            Among("i\u015Fi", -1, 1),
            Among("u\u015Fi", -1, 1),
            Among("\u00E2\u015Fi", -1, 1),
            Among("a\u0163i", -1, 2),
            Among("ea\u0163i", 38, 1),
            Among("ia\u0163i", 38, 1),
            Among("e\u0163i", -1, 2),
            Among("i\u0163i", -1, 2),
            Among("\u00E2\u0163i", -1, 2),
            Among("ar\u0103\u0163i", -1, 1),
            Among("ser\u0103\u0163i", -1, 2),
            Among("aser\u0103\u0163i", 45, 1),
            Among("seser\u0103\u0163i", 45, 2),
            Among("iser\u0103\u0163i", 45, 1),
            Among("user\u0103\u0163i", 45, 1),
            Among("\u00E2ser\u0103\u0163i", 45, 1),
            Among("ir\u0103\u0163i", -1, 1),
            Among("ur\u0103\u0163i", -1, 1),
            Among("\u00E2r\u0103\u0163i", -1, 1),
            Among("am", -1, 1),
            Among("eam", 54, 1),
            Among("iam", 54, 1),
            Among("em", -1, 2),
            Among("asem", 57, 1),
            Among("sesem", 57, 2),
            Among("isem", 57, 1),
            Among("usem", 57, 1),
            Among("\u00E2sem", 57, 1),
            Among("im", -1, 2),
            Among("\u00E2m", -1, 2),
            Among("\u0103m", -1, 2),
            Among("ar\u0103m", 65, 1),
            Among("ser\u0103m", 65, 2),
            Among("aser\u0103m", 67, 1),
            Among("seser\u0103m", 67, 2),
            Among("iser\u0103m", 67, 1),
            Among("user\u0103m", 67, 1),
            Among("\u00E2ser\u0103m", 67, 1),
            Among("ir\u0103m", 65, 1),
            Among("ur\u0103m", 65, 1),
            Among("\u00E2r\u0103m", 65, 1),
            Among("au", -1, 1),
            Among("eau", 76, 1),
            Among("iau", 76, 1),
            Among("indu", -1, 1),
            Among("\u00E2ndu", -1, 1),
            Among("ez", -1, 1),
            Among("easc\u0103", -1, 1),
            Among("ar\u0103", -1, 1),
            Among("ser\u0103", -1, 2),
            Among("aser\u0103", 84, 1),
            Among("seser\u0103", 84, 2),
            Among("iser\u0103", 84, 1),
            Among("user\u0103", 84, 1),
            Among("\u00E2ser\u0103", 84, 1),
            Among("ir\u0103", -1, 1),
            Among("ur\u0103", -1, 1),
            Among("\u00E2r\u0103", -1, 1),
            Among("eaz\u0103", -1, 1)
        )
        private val a_5: Array<Among> = arrayOf<Among>(
            Among("a", -1, 1),
            Among("e", -1, 1),
            Among("ie", 1, 1),
            Among("i", -1, 1),
            Among("\u0103", -1, 1)
        )
        private val g_v = charArrayOf(
            17.toChar(),
            65.toChar(),
            16.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            2.toChar(),
            32.toChar(),
            0.toChar(),
            0.toChar(),
            4.toChar()
        )
    }
}