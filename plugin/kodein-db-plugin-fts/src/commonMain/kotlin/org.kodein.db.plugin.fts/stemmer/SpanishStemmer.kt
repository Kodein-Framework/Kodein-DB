// This file was generated automatically by the Snowball to Java compiler
package org.kodein.db.plugin.fts.stemmer

/**
 * This class was automatically generated by a Snowball to Java compiler
 * It implements the stemming algorithm defined by a snowball script.
 */
@Suppress("UNREACHABLE_CODE")
internal class SpanishStemmer : SnowballProgram() {
    private var I_p2 = 0
    private var I_p1 = 0
    private var I_pV = 0

    private fun r_mark_regions(): Boolean {
        val v_1: Int
        var v_2: Int
        var v_3: Int
        var v_6: Int
        val v_8: Int
        // (, line 31
        I_pV = limit
        I_p1 = limit
        I_p2 = limit
        // do, line 37
        v_1 = cursor
        lab0@ do {
            // (, line 37
            // or, line 39
            lab1@ do {
                v_2 = cursor
                lab2@ do {
                    // (, line 38
                    if (!in_grouping(g_v, 97, 252)) {
                        break@lab2
                    }
                    // or, line 38
                    lab3@ do {
                        v_3 = cursor
                        lab4@ do {
                            // (, line 38
                            if (!out_grouping(g_v, 97, 252)) {
                                break@lab4
                            }
                            // gopast, line 38
                            golab5@ while (true) {
                                lab6@ do {
                                    if (!in_grouping(g_v, 97, 252)) {
                                        break@lab6
                                    }
                                    break@golab5
                                } while (false)
                                if (cursor >= limit) {
                                    break@lab4
                                }
                                cursor++
                            }
                            break@lab3
                        } while (false)
                        cursor = v_3
                        // (, line 38
                        if (!in_grouping(g_v, 97, 252)) {
                            break@lab2
                        }
                        // gopast, line 38
                        golab7@ while (true) {
                            lab8@ do {
                                if (!out_grouping(g_v, 97, 252)) {
                                    break@lab8
                                }
                                break@golab7
                            } while (false)
                            if (cursor >= limit) {
                                break@lab2
                            }
                            cursor++
                        }
                    } while (false)
                    break@lab1
                } while (false)
                cursor = v_2
                // (, line 40
                if (!out_grouping(g_v, 97, 252)) {
                    break@lab0
                }
                // or, line 40
                lab9@ do {
                    v_6 = cursor
                    lab10@ do {
                        // (, line 40
                        if (!out_grouping(g_v, 97, 252)) {
                            break@lab10
                        }
                        // gopast, line 40
                        golab11@ while (true) {
                            lab12@ do {
                                if (!in_grouping(g_v, 97, 252)) {
                                    break@lab12
                                }
                                break@golab11
                            } while (false)
                            if (cursor >= limit) {
                                break@lab10
                            }
                            cursor++
                        }
                        break@lab9
                    } while (false)
                    cursor = v_6
                    // (, line 40
                    if (!in_grouping(g_v, 97, 252)) {
                        break@lab0
                    }
                    // next, line 40
                    if (cursor >= limit) {
                        break@lab0
                    }
                    cursor++
                } while (false)
            } while (false)
            // setmark pV, line 41
            I_pV = cursor
        } while (false)
        cursor = v_1
        // do, line 43
        v_8 = cursor
        lab13@ do {
            // (, line 43
            // gopast, line 44
            golab14@ while (true) {
                lab15@ do {
                    if (!in_grouping(g_v, 97, 252)) {
                        break@lab15
                    }
                    break@golab14
                } while (false)
                if (cursor >= limit) {
                    break@lab13
                }
                cursor++
            }
            // gopast, line 44
            golab16@ while (true) {
                lab17@ do {
                    if (!out_grouping(g_v, 97, 252)) {
                        break@lab17
                    }
                    break@golab16
                } while (false)
                if (cursor >= limit) {
                    break@lab13
                }
                cursor++
            }
            // setmark p1, line 44
            I_p1 = cursor
            // gopast, line 45
            golab18@ while (true) {
                lab19@ do {
                    if (!in_grouping(g_v, 97, 252)) {
                        break@lab19
                    }
                    break@golab18
                } while (false)
                if (cursor >= limit) {
                    break@lab13
                }
                cursor++
            }
            // gopast, line 45
            golab20@ while (true) {
                lab21@ do {
                    if (!out_grouping(g_v, 97, 252)) {
                        break@lab21
                    }
                    break@golab20
                } while (false)
                if (cursor >= limit) {
                    break@lab13
                }
                cursor++
            }
            // setmark p2, line 45
            I_p2 = cursor
        } while (false)
        cursor = v_8
        return true
    }

    private fun r_postlude(): Boolean {
        var among_var: Int
        var v_1: Int
        // repeat, line 49
        replab0@ while (true) {
            v_1 = cursor
            lab1@ do {
                // (, line 49
                // [, line 50
                bra = cursor
                // substring, line 50
                among_var = find_among(a_0, 6)
                if (among_var == 0) {
                    break@lab1
                }
                // ], line 50
                ket = cursor
                when (among_var) {
                    0 -> break@lab1
                    1 ->                                     // (, line 51
                        // <-, line 51
                        slice_from("a")
                    2 ->                                     // (, line 52
                        // <-, line 52
                        slice_from("e")
                    3 ->                                     // (, line 53
                        // <-, line 53
                        slice_from("i")
                    4 ->                                     // (, line 54
                        // <-, line 54
                        slice_from("o")
                    5 ->                                     // (, line 55
                        // <-, line 55
                        slice_from("u")
                    6 -> {
                        // (, line 57
                        // next, line 57
                        if (cursor >= limit) {
                            break@lab1
                        }
                        cursor++
                    }
                }
                continue@replab0
            } while (false)
            cursor = v_1
            break@replab0
        }
        return true
    }

    private fun r_RV(): Boolean {
        return if (I_pV > cursor) {
            false
        } else true
    }

    private fun r_R1(): Boolean {
        return if (I_p1 > cursor) {
            false
        } else true
    }

    private fun r_R2(): Boolean {
        return if (I_p2 > cursor) {
            false
        } else true
    }

    private fun r_attached_pronoun(): Boolean {
        val among_var: Int
        // (, line 67
        // [, line 68
        ket = cursor
        // substring, line 68
        if (find_among_b(a_1, 13) == 0) {
            return false
        }
        // ], line 68
        bra = cursor
        // substring, line 72
        among_var = find_among_b(a_2, 11)
        if (among_var == 0) {
            return false
        }
        // call RV, line 72
        if (!r_RV()) {
            return false
        }
        when (among_var) {
            0 -> return false
            1 -> {
                // (, line 73
                // ], line 73
                bra = cursor
                // <-, line 73
                slice_from("iendo")
            }
            2 -> {
                // (, line 74
                // ], line 74
                bra = cursor
                // <-, line 74
                slice_from("ando")
            }
            3 -> {
                // (, line 75
                // ], line 75
                bra = cursor
                // <-, line 75
                slice_from("ar")
            }
            4 -> {
                // (, line 76
                // ], line 76
                bra = cursor
                // <-, line 76
                slice_from("er")
            }
            5 -> {
                // (, line 77
                // ], line 77
                bra = cursor
                // <-, line 77
                slice_from("ir")
            }
            6 ->                             // (, line 81
                // delete, line 81
                slice_del()
            7 -> {
                // (, line 82
                // literal, line 82
                if (!eq_s_b(1, "u")) {
                    return false
                }
                // delete, line 82
                slice_del()
            }
        }
        return true
    }

    private fun r_standard_suffix(): Boolean {
        var among_var: Int
        val v_1: Int
        val v_2: Int
        val v_3: Int
        val v_4: Int
        val v_5: Int
        // (, line 86
        // [, line 87
        ket = cursor
        // substring, line 87
        among_var = find_among_b(a_6, 46)
        if (among_var == 0) {
            return false
        }
        // ], line 87
        bra = cursor
        when (among_var) {
            0 -> return false
            1 -> {
                // (, line 98
                // call R2, line 99
                if (!r_R2()) {
                    return false
                }
                // delete, line 99
                slice_del()
            }
            2 -> {
                // (, line 104
                // call R2, line 105
                if (!r_R2()) {
                    return false
                }
                // delete, line 105
                slice_del()
                // try, line 106
                v_1 = limit - cursor
                lab0@ do {
                    // (, line 106
                    // [, line 106
                    ket = cursor
                    // literal, line 106
                    if (!eq_s_b(2, "ic")) {
                        cursor = limit - v_1
                        break@lab0
                    }
                    // ], line 106
                    bra = cursor
                    // call R2, line 106
                    if (!r_R2()) {
                        cursor = limit - v_1
                        break@lab0
                    }
                    // delete, line 106
                    slice_del()
                } while (false)
            }
            3 -> {
                // (, line 110
                // call R2, line 111
                if (!r_R2()) {
                    return false
                }
                // <-, line 111
                slice_from("log")
            }
            4 -> {
                // (, line 114
                // call R2, line 115
                if (!r_R2()) {
                    return false
                }
                // <-, line 115
                slice_from("u")
            }
            5 -> {
                // (, line 118
                // call R2, line 119
                if (!r_R2()) {
                    return false
                }
                // <-, line 119
                slice_from("ente")
            }
            6 -> {
                // (, line 122
                // call R1, line 123
                if (!r_R1()) {
                    return false
                }
                // delete, line 123
                slice_del()
                // try, line 124
                v_2 = limit - cursor
                lab1@ do {
                    // (, line 124
                    // [, line 125
                    ket = cursor
                    // substring, line 125
                    among_var = find_among_b(a_3, 4)
                    if (among_var == 0) {
                        cursor = limit - v_2
                        break@lab1
                    }
                    // ], line 125
                    bra = cursor
                    // call R2, line 125
                    if (!r_R2()) {
                        cursor = limit - v_2
                        break@lab1
                    }
                    // delete, line 125
                    slice_del()
                    when (among_var) {
                        0 -> {
                            cursor = limit - v_2
                            break@lab1
                        }
                        1 -> {
                            // (, line 126
                            // [, line 126
                            ket = cursor
                            // literal, line 126
                            if (!eq_s_b(2, "at")) {
                                cursor = limit - v_2
                                break@lab1
                            }
                            // ], line 126
                            bra = cursor
                            // call R2, line 126
                            if (!r_R2()) {
                                cursor = limit - v_2
                                break@lab1
                            }
                            // delete, line 126
                            slice_del()
                        }
                    }
                } while (false)
            }
            7 -> {
                // (, line 134
                // call R2, line 135
                if (!r_R2()) {
                    return false
                }
                // delete, line 135
                slice_del()
                // try, line 136
                v_3 = limit - cursor
                lab2@ do {
                    // (, line 136
                    // [, line 137
                    ket = cursor
                    // substring, line 137
                    among_var = find_among_b(a_4, 3)
                    if (among_var == 0) {
                        cursor = limit - v_3
                        break@lab2
                    }
                    // ], line 137
                    bra = cursor
                    when (among_var) {
                        0 -> {
                            cursor = limit - v_3
                            break@lab2
                        }
                        1 -> {
                            // (, line 140
                            // call R2, line 140
                            if (!r_R2()) {
                                cursor = limit - v_3
                                break@lab2
                            }
                            // delete, line 140
                            slice_del()
                        }
                    }
                } while (false)
            }
            8 -> {
                // (, line 146
                // call R2, line 147
                if (!r_R2()) {
                    return false
                }
                // delete, line 147
                slice_del()
                // try, line 148
                v_4 = limit - cursor
                lab3@ do {
                    // (, line 148
                    // [, line 149
                    ket = cursor
                    // substring, line 149
                    among_var = find_among_b(a_5, 3)
                    if (among_var == 0) {
                        cursor = limit - v_4
                        break@lab3
                    }
                    // ], line 149
                    bra = cursor
                    when (among_var) {
                        0 -> {
                            cursor = limit - v_4
                            break@lab3
                        }
                        1 -> {
                            // (, line 152
                            // call R2, line 152
                            if (!r_R2()) {
                                cursor = limit - v_4
                                break@lab3
                            }
                            // delete, line 152
                            slice_del()
                        }
                    }
                } while (false)
            }
            9 -> {
                // (, line 158
                // call R2, line 159
                if (!r_R2()) {
                    return false
                }
                // delete, line 159
                slice_del()
                // try, line 160
                v_5 = limit - cursor
                lab4@ do {
                    // (, line 160
                    // [, line 161
                    ket = cursor
                    // literal, line 161
                    if (!eq_s_b(2, "at")) {
                        cursor = limit - v_5
                        break@lab4
                    }
                    // ], line 161
                    bra = cursor
                    // call R2, line 161
                    if (!r_R2()) {
                        cursor = limit - v_5
                        break@lab4
                    }
                    // delete, line 161
                    slice_del()
                } while (false)
            }
        }
        return true
    }

    private fun r_y_verb_suffix(): Boolean {
        val among_var: Int
        val v_1: Int
        val v_2: Int
        // (, line 167
        // setlimit, line 168
        v_1 = limit - cursor
        // tomark, line 168
        if (cursor < I_pV) {
            return false
        }
        cursor = I_pV
        v_2 = limit_backward
        limit_backward = cursor
        cursor = limit - v_1
        // (, line 168
        // [, line 168
        ket = cursor
        // substring, line 168
        among_var = find_among_b(a_7, 12)
        if (among_var == 0) {
            limit_backward = v_2
            return false
        }
        // ], line 168
        bra = cursor
        limit_backward = v_2
        when (among_var) {
            0 -> return false
            1 -> {
                // (, line 171
                // literal, line 171
                if (!eq_s_b(1, "u")) {
                    return false
                }
                // delete, line 171
                slice_del()
            }
        }
        return true
    }

    private fun r_verb_suffix(): Boolean {
        val among_var: Int
        val v_1: Int
        val v_2: Int
        val v_3: Int
        var v_4: Int
        // (, line 175
        // setlimit, line 176
        v_1 = limit - cursor
        // tomark, line 176
        if (cursor < I_pV) {
            return false
        }
        cursor = I_pV
        v_2 = limit_backward
        limit_backward = cursor
        cursor = limit - v_1
        // (, line 176
        // [, line 176
        ket = cursor
        // substring, line 176
        among_var = find_among_b(a_8, 96)
        if (among_var == 0) {
            limit_backward = v_2
            return false
        }
        // ], line 176
        bra = cursor
        limit_backward = v_2
        when (among_var) {
            0 -> return false
            1 -> {
                // (, line 179
                // try, line 179
                v_3 = limit - cursor
                lab0@ do {
                    // (, line 179
                    // literal, line 179
                    if (!eq_s_b(1, "u")) {
                        cursor = limit - v_3
                        break@lab0
                    }
                    // test, line 179
                    v_4 = limit - cursor
                    // literal, line 179
                    if (!eq_s_b(1, "g")) {
                        cursor = limit - v_3
                        break@lab0
                    }
                    cursor = limit - v_4
                } while (false)
                // ], line 179
                bra = cursor
                // delete, line 179
                slice_del()
            }
            2 ->                             // (, line 200
                // delete, line 200
                slice_del()
        }
        return true
    }

    private fun r_residual_suffix(): Boolean {
        val among_var: Int
        val v_1: Int
        var v_2: Int
        // (, line 204
        // [, line 205
        ket = cursor
        // substring, line 205
        among_var = find_among_b(a_9, 8)
        if (among_var == 0) {
            return false
        }
        // ], line 205
        bra = cursor
        when (among_var) {
            0 -> return false
            1 -> {
                // (, line 208
                // call RV, line 208
                if (!r_RV()) {
                    return false
                }
                // delete, line 208
                slice_del()
            }
            2 -> {
                // (, line 210
                // call RV, line 210
                if (!r_RV()) {
                    return false
                }
                // delete, line 210
                slice_del()
                // try, line 210
                v_1 = limit - cursor
                lab0@ do {
                    // (, line 210
                    // [, line 210
                    ket = cursor
                    // literal, line 210
                    if (!eq_s_b(1, "u")) {
                        cursor = limit - v_1
                        break@lab0
                    }
                    // ], line 210
                    bra = cursor
                    // test, line 210
                    v_2 = limit - cursor
                    // literal, line 210
                    if (!eq_s_b(1, "g")) {
                        cursor = limit - v_1
                        break@lab0
                    }
                    cursor = limit - v_2
                    // call RV, line 210
                    if (!r_RV()) {
                        cursor = limit - v_1
                        break@lab0
                    }
                    // delete, line 210
                    slice_del()
                } while (false)
            }
        }
        return true
    }

    override fun stem(): Boolean {
        val v_1: Int
        val v_2: Int
        val v_3: Int
        var v_4: Int
        val v_5: Int
        val v_6: Int
        // (, line 215
        // do, line 216
        v_1 = cursor
        lab0@ do {
            // call mark_regions, line 216
            if (!r_mark_regions()) {
                break@lab0
            }
        } while (false)
        cursor = v_1
        // backwards, line 217
        limit_backward = cursor
        cursor = limit
        // (, line 217
        // do, line 218
        v_2 = limit - cursor
        lab1@ do {
            // call attached_pronoun, line 218
            if (!r_attached_pronoun()) {
                break@lab1
            }
        } while (false)
        cursor = limit - v_2
        // do, line 219
        v_3 = limit - cursor
        lab2@ do {
            // (, line 219
            // or, line 219
            lab3@ do {
                v_4 = limit - cursor
                lab4@ do {
                    // call standard_suffix, line 219
                    if (!r_standard_suffix()) {
                        break@lab4
                    }
                    break@lab3
                } while (false)
                cursor = limit - v_4
                lab5@ do {
                    // call y_verb_suffix, line 220
                    if (!r_y_verb_suffix()) {
                        break@lab5
                    }
                    break@lab3
                } while (false)
                cursor = limit - v_4
                // call verb_suffix, line 221
                if (!r_verb_suffix()) {
                    break@lab2
                }
            } while (false)
        } while (false)
        cursor = limit - v_3
        // do, line 223
        v_5 = limit - cursor
        lab6@ do {
            // call residual_suffix, line 223
            if (!r_residual_suffix()) {
                break@lab6
            }
        } while (false)
        cursor = limit - v_5
        cursor = limit_backward // do, line 225
        v_6 = cursor
        lab7@ do {
            // call postlude, line 225
            if (!r_postlude()) {
                break@lab7
            }
        } while (false)
        cursor = v_6
        return true
    }

    override fun equals(other: Any?): Boolean {
        return other is SpanishStemmer
    }

    override fun hashCode(): Int {
        return SpanishStemmer::class.qualifiedName.hashCode()
    }

    companion object {
        private val a_0 = arrayOf(
            Among("", -1, 6),
            Among("\u00E1", 0, 1),
            Among("\u00E9", 0, 2),
            Among("\u00ED", 0, 3),
            Among("\u00F3", 0, 4),
            Among("\u00FA", 0, 5)
        )
        private val a_1 = arrayOf(
            Among("la", -1, -1),
            Among("sela", 0, -1),
            Among("le", -1, -1),
            Among("me", -1, -1),
            Among("se", -1, -1),
            Among("lo", -1, -1),
            Among("selo", 5, -1),
            Among("las", -1, -1),
            Among("selas", 7, -1),
            Among("les", -1, -1),
            Among("los", -1, -1),
            Among("selos", 10, -1),
            Among("nos", -1, -1)
        )
        private val a_2 = arrayOf(
            Among("ando", -1, 6),
            Among("iendo", -1, 6),
            Among("yendo", -1, 7),
            Among("\u00E1ndo", -1, 2),
            Among("i\u00E9ndo", -1, 1),
            Among("ar", -1, 6),
            Among("er", -1, 6),
            Among("ir", -1, 6),
            Among("\u00E1r", -1, 3),
            Among("\u00E9r", -1, 4),
            Among("\u00EDr", -1, 5)
        )
        private val a_3 = arrayOf(
            Among("ic", -1, -1),
            Among("ad", -1, -1),
            Among("os", -1, -1),
            Among("iv", -1, 1)
        )
        private val a_4 = arrayOf(
            Among("able", -1, 1),
            Among("ible", -1, 1),
            Among("ante", -1, 1)
        )
        private val a_5 = arrayOf(
            Among("ic", -1, 1),
            Among("abil", -1, 1),
            Among("iv", -1, 1)
        )
        private val a_6 = arrayOf(
            Among("ica", -1, 1),
            Among("ancia", -1, 2),
            Among("encia", -1, 5),
            Among("adora", -1, 2),
            Among("osa", -1, 1),
            Among("ista", -1, 1),
            Among("iva", -1, 9),
            Among("anza", -1, 1),
            Among("log\u00EDa", -1, 3),
            Among("idad", -1, 8),
            Among("able", -1, 1),
            Among("ible", -1, 1),
            Among("ante", -1, 2),
            Among("mente", -1, 7),
            Among("amente", 13, 6),
            Among("aci\u00F3n", -1, 2),
            Among("uci\u00F3n", -1, 4),
            Among("ico", -1, 1),
            Among("ismo", -1, 1),
            Among("oso", -1, 1),
            Among("amiento", -1, 1),
            Among("imiento", -1, 1),
            Among("ivo", -1, 9),
            Among("ador", -1, 2),
            Among("icas", -1, 1),
            Among("ancias", -1, 2),
            Among("encias", -1, 5),
            Among("adoras", -1, 2),
            Among("osas", -1, 1),
            Among("istas", -1, 1),
            Among("ivas", -1, 9),
            Among("anzas", -1, 1),
            Among("log\u00EDas", -1, 3),
            Among("idades", -1, 8),
            Among("ables", -1, 1),
            Among("ibles", -1, 1),
            Among("aciones", -1, 2),
            Among("uciones", -1, 4),
            Among("adores", -1, 2),
            Among("antes", -1, 2),
            Among("icos", -1, 1),
            Among("ismos", -1, 1),
            Among("osos", -1, 1),
            Among("amientos", -1, 1),
            Among("imientos", -1, 1),
            Among("ivos", -1, 9)
        )
        private val a_7 = arrayOf(
            Among("ya", -1, 1),
            Among("ye", -1, 1),
            Among("yan", -1, 1),
            Among("yen", -1, 1),
            Among("yeron", -1, 1),
            Among("yendo", -1, 1),
            Among("yo", -1, 1),
            Among("yas", -1, 1),
            Among("yes", -1, 1),
            Among("yais", -1, 1),
            Among("yamos", -1, 1),
            Among("y\u00F3", -1, 1)
        )
        private val a_8 = arrayOf(
            Among("aba", -1, 2),
            Among("ada", -1, 2),
            Among("ida", -1, 2),
            Among("ara", -1, 2),
            Among("iera", -1, 2),
            Among("\u00EDa", -1, 2),
            Among("ar\u00EDa", 5, 2),
            Among("er\u00EDa", 5, 2),
            Among("ir\u00EDa", 5, 2),
            Among("ad", -1, 2),
            Among("ed", -1, 2),
            Among("id", -1, 2),
            Among("ase", -1, 2),
            Among("iese", -1, 2),
            Among("aste", -1, 2),
            Among("iste", -1, 2),
            Among("an", -1, 2),
            Among("aban", 16, 2),
            Among("aran", 16, 2),
            Among("ieran", 16, 2),
            Among("\u00EDan", 16, 2),
            Among("ar\u00EDan", 20, 2),
            Among("er\u00EDan", 20, 2),
            Among("ir\u00EDan", 20, 2),
            Among("en", -1, 1),
            Among("asen", 24, 2),
            Among("iesen", 24, 2),
            Among("aron", -1, 2),
            Among("ieron", -1, 2),
            Among("ar\u00E1n", -1, 2),
            Among("er\u00E1n", -1, 2),
            Among("ir\u00E1n", -1, 2),
            Among("ado", -1, 2),
            Among("ido", -1, 2),
            Among("ando", -1, 2),
            Among("iendo", -1, 2),
            Among("ar", -1, 2),
            Among("er", -1, 2),
            Among("ir", -1, 2),
            Among("as", -1, 2),
            Among("abas", 39, 2),
            Among("adas", 39, 2),
            Among("idas", 39, 2),
            Among("aras", 39, 2),
            Among("ieras", 39, 2),
            Among("\u00EDas", 39, 2),
            Among("ar\u00EDas", 45, 2),
            Among("er\u00EDas", 45, 2),
            Among("ir\u00EDas", 45, 2),
            Among("es", -1, 1),
            Among("ases", 49, 2),
            Among("ieses", 49, 2),
            Among("abais", -1, 2),
            Among("arais", -1, 2),
            Among("ierais", -1, 2),
            Among("\u00EDais", -1, 2),
            Among("ar\u00EDais", 55, 2),
            Among("er\u00EDais", 55, 2),
            Among("ir\u00EDais", 55, 2),
            Among("aseis", -1, 2),
            Among("ieseis", -1, 2),
            Among("asteis", -1, 2),
            Among("isteis", -1, 2),
            Among("\u00E1is", -1, 2),
            Among("\u00E9is", -1, 1),
            Among("ar\u00E9is", 64, 2),
            Among("er\u00E9is", 64, 2),
            Among("ir\u00E9is", 64, 2),
            Among("ados", -1, 2),
            Among("idos", -1, 2),
            Among("amos", -1, 2),
            Among("\u00E1bamos", 70, 2),
            Among("\u00E1ramos", 70, 2),
            Among("i\u00E9ramos", 70, 2),
            Among("\u00EDamos", 70, 2),
            Among("ar\u00EDamos", 74, 2),
            Among("er\u00EDamos", 74, 2),
            Among("ir\u00EDamos", 74, 2),
            Among("emos", -1, 1),
            Among("aremos", 78, 2),
            Among("eremos", 78, 2),
            Among("iremos", 78, 2),
            Among("\u00E1semos", 78, 2),
            Among("i\u00E9semos", 78, 2),
            Among("imos", -1, 2),
            Among("ar\u00E1s", -1, 2),
            Among("er\u00E1s", -1, 2),
            Among("ir\u00E1s", -1, 2),
            Among("\u00EDs", -1, 2),
            Among("ar\u00E1", -1, 2),
            Among("er\u00E1", -1, 2),
            Among("ir\u00E1", -1, 2),
            Among("ar\u00E9", -1, 2),
            Among("er\u00E9", -1, 2),
            Among("ir\u00E9", -1, 2),
            Among("i\u00F3", -1, 2)
        )
        private val a_9 = arrayOf(
            Among("a", -1, 1),
            Among("e", -1, 2),
            Among("o", -1, 1),
            Among("os", -1, 1),
            Among("\u00E1", -1, 1),
            Among("\u00E9", -1, 2),
            Among("\u00ED", -1, 1),
            Among("\u00F3", -1, 1)
        )
        private val g_v = charArrayOf(
            17.toChar(),
            65.toChar(),
            16.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            1.toChar(),
            17.toChar(),
            4.toChar(),
            10.toChar()
        )
    }
}