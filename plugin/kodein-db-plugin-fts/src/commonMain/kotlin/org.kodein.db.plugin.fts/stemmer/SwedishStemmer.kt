// This file was generated automatically by the Snowball to Java compiler
package org.kodein.db.plugin.fts.stemmer

/**
 * This class was automatically generated by a Snowball to Java compiler
 * It implements the stemming algorithm defined by a snowball script.
 */
@Suppress("UNREACHABLE_CODE")
internal class SwedishStemmer : SnowballProgram() {
    private var I_x = 0
    private var I_p1 = 0

    private fun r_mark_regions(): Boolean {
        val v_1: Int
        var v_2: Int
        // (, line 26
        I_p1 = limit
        // test, line 29
        v_1 = cursor
        // (, line 29
        // hop, line 29
        run {
            val c = cursor + 3
            if (0 > c || c > limit) {
                return false
            }
            cursor = c
        }
        // setmark x, line 29
        I_x = cursor
        cursor = v_1
        // goto, line 30
        golab0@ while (true) {
            v_2 = cursor
            lab1@ do {
                if (!in_grouping(g_v, 97, 246)) {
                    break@lab1
                }
                cursor = v_2
                break@golab0
            } while (false)
            cursor = v_2
            if (cursor >= limit) {
                return false
            }
            cursor++
        }
        // gopast, line 30
        golab2@ while (true) {
            lab3@ do {
                if (!out_grouping(g_v, 97, 246)) {
                    break@lab3
                }
                break@golab2
            } while (false)
            if (cursor >= limit) {
                return false
            }
            cursor++
        }
        // setmark p1, line 30
        I_p1 = cursor
        // try, line 31
        lab4@ do {
            // (, line 31
            if (I_p1 >= I_x) {
                break@lab4
            }
            I_p1 = I_x
        } while (false)
        return true
    }

    private fun r_main_suffix(): Boolean {
        val among_var: Int
        val v_1: Int
        val v_2: Int
        // (, line 36
        // setlimit, line 37
        v_1 = limit - cursor
        // tomark, line 37
        if (cursor < I_p1) {
            return false
        }
        cursor = I_p1
        v_2 = limit_backward
        limit_backward = cursor
        cursor = limit - v_1
        // (, line 37
        // [, line 37
        ket = cursor
        // substring, line 37
        among_var = find_among_b(a_0, 37)
        if (among_var == 0) {
            limit_backward = v_2
            return false
        }
        // ], line 37
        bra = cursor
        limit_backward = v_2
        when (among_var) {
            0 -> return false
            1 ->                             // (, line 44
                // delete, line 44
                slice_del()
            2 -> {
                // (, line 46
                if (!in_grouping_b(g_s_ending, 98, 121)) {
                    return false
                }
                // delete, line 46
                slice_del()
            }
        }
        return true
    }

    private fun r_consonant_pair(): Boolean {
        val v_1: Int
        val v_2: Int
        val v_3: Int
        // setlimit, line 50
        v_1 = limit - cursor
        // tomark, line 50
        if (cursor < I_p1) {
            return false
        }
        cursor = I_p1
        v_2 = limit_backward
        limit_backward = cursor
        cursor = limit - v_1
        // (, line 50
        // and, line 52
        v_3 = limit - cursor
        // among, line 51
        if (find_among_b(a_1, 7) == 0) {
            limit_backward = v_2
            return false
        }
        cursor = limit - v_3
        // (, line 52
        // [, line 52
        ket = cursor
        // next, line 52
        if (cursor <= limit_backward) {
            limit_backward = v_2
            return false
        }
        cursor--
        // ], line 52
        bra = cursor
        // delete, line 52
        slice_del()
        limit_backward = v_2
        return true
    }

    private fun r_other_suffix(): Boolean {
        val among_var: Int
        val v_1: Int
        val v_2: Int
        // setlimit, line 55
        v_1 = limit - cursor
        // tomark, line 55
        if (cursor < I_p1) {
            return false
        }
        cursor = I_p1
        v_2 = limit_backward
        limit_backward = cursor
        cursor = limit - v_1
        // (, line 55
        // [, line 56
        ket = cursor
        // substring, line 56
        among_var = find_among_b(a_2, 5)
        if (among_var == 0) {
            limit_backward = v_2
            return false
        }
        // ], line 56
        bra = cursor
        when (among_var) {
            0 -> {
                limit_backward = v_2
                return false
            }
            1 ->                             // (, line 57
                // delete, line 57
                slice_del()
            2 ->                             // (, line 58
                // <-, line 58
                slice_from("l\u00F6s")
            3 ->                             // (, line 59
                // <-, line 59
                slice_from("full")
        }
        limit_backward = v_2
        return true
    }

    override fun stem(): Boolean {
        val v_1: Int
        val v_2: Int
        val v_3: Int
        val v_4: Int
        // (, line 64
        // do, line 66
        v_1 = cursor
        lab0@ do {
            // call mark_regions, line 66
            if (!r_mark_regions()) {
                break@lab0
            }
        } while (false)
        cursor = v_1
        // backwards, line 67
        limit_backward = cursor
        cursor = limit
        // (, line 67
        // do, line 68
        v_2 = limit - cursor
        lab1@ do {
            // call main_suffix, line 68
            if (!r_main_suffix()) {
                break@lab1
            }
        } while (false)
        cursor = limit - v_2
        // do, line 69
        v_3 = limit - cursor
        lab2@ do {
            // call consonant_pair, line 69
            if (!r_consonant_pair()) {
                break@lab2
            }
        } while (false)
        cursor = limit - v_3
        // do, line 70
        v_4 = limit - cursor
        lab3@ do {
            // call other_suffix, line 70
            if (!r_other_suffix()) {
                break@lab3
            }
        } while (false)
        cursor = limit - v_4
        cursor = limit_backward
        return true
    }

    override fun equals(other: Any?): Boolean {
        return other is SwedishStemmer
    }

    override fun hashCode(): Int {
        return SwedishStemmer::class.qualifiedName.hashCode()
    }

    companion object {
        private val a_0 = arrayOf(
            Among("a", -1, 1),
            Among("arna", 0, 1),
            Among("erna", 0, 1),
            Among("heterna", 2, 1),
            Among("orna", 0, 1),
            Among("ad", -1, 1),
            Among("e", -1, 1),
            Among("ade", 6, 1),
            Among("ande", 6, 1),
            Among("arne", 6, 1),
            Among("are", 6, 1),
            Among("aste", 6, 1),
            Among("en", -1, 1),
            Among("anden", 12, 1),
            Among("aren", 12, 1),
            Among("heten", 12, 1),
            Among("ern", -1, 1),
            Among("ar", -1, 1),
            Among("er", -1, 1),
            Among("heter", 18, 1),
            Among("or", -1, 1),
            Among("s", -1, 2),
            Among("as", 21, 1),
            Among("arnas", 22, 1),
            Among("ernas", 22, 1),
            Among("ornas", 22, 1),
            Among("es", 21, 1),
            Among("ades", 26, 1),
            Among("andes", 26, 1),
            Among("ens", 21, 1),
            Among("arens", 29, 1),
            Among("hetens", 29, 1),
            Among("erns", 21, 1),
            Among("at", -1, 1),
            Among("andet", -1, 1),
            Among("het", -1, 1),
            Among("ast", -1, 1)
        )
        private val a_1 = arrayOf(
            Among("dd", -1, -1),
            Among("gd", -1, -1),
            Among("nn", -1, -1),
            Among("dt", -1, -1),
            Among("gt", -1, -1),
            Among("kt", -1, -1),
            Among("tt", -1, -1)
        )
        private val a_2 = arrayOf(
            Among("ig", -1, 1),
            Among("lig", 0, 1),
            Among("els", -1, 1),
            Among("fullt", -1, 3),
            Among("l\u00F6st", -1, 2)
        )
        private val g_v = charArrayOf(
            17.toChar(),
            65.toChar(),
            16.toChar(),
            1.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            24.toChar(),
            0.toChar(),
            32.toChar()
        )
        private val g_s_ending = charArrayOf(119.toChar(), 127.toChar(), 149.toChar())
    }
}