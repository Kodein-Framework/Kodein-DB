// This file was generated automatically by the Snowball to Java compiler
package org.kodein.db.plugin.fts.stemmer

/**
 * This class was automatically generated by a Snowball to Java compiler
 * It implements the stemming algorithm defined by a snowball script.
 */
@Suppress("UNREACHABLE_CODE")
internal class FinnishStemmer : SnowballProgram() {
    private var B_ending_removed = false
    private var S_x = StringBuilder()
    private var I_p2 = 0
    private var I_p1 = 0

    private fun r_mark_regions(): Boolean {
        var v_1: Int
        var v_3: Int
        // (, line 41
        I_p1 = limit
        I_p2 = limit
        // goto, line 46
        golab0@ while (true) {
            v_1 = cursor
            lab1@ do {
                if (!in_grouping(g_V1, 97, 246)) {
                    break@lab1
                }
                cursor = v_1
                break@golab0
            } while (false)
            cursor = v_1
            if (cursor >= limit) {
                return false
            }
            cursor++
        }
        // gopast, line 46
        golab2@ while (true) {
            lab3@ do {
                if (!out_grouping(g_V1, 97, 246)) {
                    break@lab3
                }
                break@golab2
            } while (false)
            if (cursor >= limit) {
                return false
            }
            cursor++
        }
        // setmark p1, line 46
        I_p1 = cursor
        // goto, line 47
        golab4@ while (true) {
            v_3 = cursor
            lab5@ do {
                if (!in_grouping(g_V1, 97, 246)) {
                    break@lab5
                }
                cursor = v_3
                break@golab4
            } while (false)
            cursor = v_3
            if (cursor >= limit) {
                return false
            }
            cursor++
        }
        // gopast, line 47
        golab6@ while (true) {
            lab7@ do {
                if (!out_grouping(g_V1, 97, 246)) {
                    break@lab7
                }
                break@golab6
            } while (false)
            if (cursor >= limit) {
                return false
            }
            cursor++
        }
        // setmark p2, line 47
        I_p2 = cursor
        return true
    }

    private fun r_R2(): Boolean {
        return if (I_p2 > cursor) {
            false
        } else true
    }

    private fun r_particle_etc(): Boolean {
        val among_var: Int
        val v_1: Int
        val v_2: Int
        // (, line 54
        // setlimit, line 55
        v_1 = limit - cursor
        // tomark, line 55
        if (cursor < I_p1) {
            return false
        }
        cursor = I_p1
        v_2 = limit_backward
        limit_backward = cursor
        cursor = limit - v_1
        // (, line 55
        // [, line 55
        ket = cursor
        // substring, line 55
        among_var = find_among_b(a_0, 10)
        if (among_var == 0) {
            limit_backward = v_2
            return false
        }
        // ], line 55
        bra = cursor
        limit_backward = v_2
        when (among_var) {
            0 -> return false
            1 ->                             // (, line 62
                if (!in_grouping_b(g_particle_end, 97, 246)) {
                    return false
                }
            2 ->                             // (, line 64
                // call R2, line 64
                if (!r_R2()) {
                    return false
                }
        }
        // delete, line 66
        slice_del()
        return true
    }

    private fun r_possessive(): Boolean {
        val among_var: Int
        val v_1: Int
        val v_2: Int
        var v_3: Int
        // (, line 68
        // setlimit, line 69
        v_1 = limit - cursor
        // tomark, line 69
        if (cursor < I_p1) {
            return false
        }
        cursor = I_p1
        v_2 = limit_backward
        limit_backward = cursor
        cursor = limit - v_1
        // (, line 69
        // [, line 69
        ket = cursor
        // substring, line 69
        among_var = find_among_b(a_4, 9)
        if (among_var == 0) {
            limit_backward = v_2
            return false
        }
        // ], line 69
        bra = cursor
        limit_backward = v_2
        when (among_var) {
            0 -> return false
            1 -> {
                run {
                    v_3 = limit - cursor
                    lab0@ do {
                        // literal, line 72
                        if (!eq_s_b(1, "k")) {
                            break@lab0
                        }
                        return false
                    } while (false)
                    cursor = limit - v_3
                }
                // delete, line 72
                slice_del()
            }
            2 -> {
                // (, line 74
                // delete, line 74
                slice_del()
                // [, line 74
                ket = cursor
                // literal, line 74
                if (!eq_s_b(3, "kse")) {
                    return false
                }
                // ], line 74
                bra = cursor
                // <-, line 74
                slice_from("ksi")
            }
            3 ->                             // (, line 78
                // delete, line 78
                slice_del()
            4 -> {
                // (, line 81
                // among, line 81
                if (find_among_b(a_1, 6) == 0) {
                    return false
                }
                // delete, line 81
                slice_del()
            }
            5 -> {
                // (, line 83
                // among, line 83
                if (find_among_b(a_2, 6) == 0) {
                    return false
                }
                // delete, line 84
                slice_del()
            }
            6 -> {
                // (, line 86
                // among, line 86
                if (find_among_b(a_3, 2) == 0) {
                    return false
                }
                // delete, line 86
                slice_del()
            }
        }
        return true
    }

    private fun r_LONG(): Boolean {
        // among, line 91
        return if (find_among_b(a_5, 7) == 0) {
            false
        } else true
    }

    private fun r_VI(): Boolean {
        // (, line 93
        // literal, line 93
        if (!eq_s_b(1, "i")) {
            return false
        }
        return if (!in_grouping_b(g_V2, 97, 246)) {
            false
        } else true
    }

    private fun r_case_ending(): Boolean {
        val among_var: Int
        val v_1: Int
        val v_2: Int
        val v_3: Int
        var v_4: Int
        var v_5: Int
        // (, line 95
        // setlimit, line 96
        v_1 = limit - cursor
        // tomark, line 96
        if (cursor < I_p1) {
            return false
        }
        cursor = I_p1
        v_2 = limit_backward
        limit_backward = cursor
        cursor = limit - v_1
        // (, line 96
        // [, line 96
        ket = cursor
        // substring, line 96
        among_var = find_among_b(a_6, 30)
        if (among_var == 0) {
            limit_backward = v_2
            return false
        }
        // ], line 96
        bra = cursor
        limit_backward = v_2
        when (among_var) {
            0 -> return false
            1 ->                             // (, line 98
                // literal, line 98
                if (!eq_s_b(1, "a")) {
                    return false
                }
            2 ->                             // (, line 99
                // literal, line 99
                if (!eq_s_b(1, "e")) {
                    return false
                }
            3 ->                             // (, line 100
                // literal, line 100
                if (!eq_s_b(1, "i")) {
                    return false
                }
            4 ->                             // (, line 101
                // literal, line 101
                if (!eq_s_b(1, "o")) {
                    return false
                }
            5 ->                             // (, line 102
                // literal, line 102
                if (!eq_s_b(1, "\u00E4")) {
                    return false
                }
            6 ->                             // (, line 103
                // literal, line 103
                if (!eq_s_b(1, "\u00F6")) {
                    return false
                }
            7 -> {
                // (, line 111
                // try, line 111
                v_3 = limit - cursor
                lab0@ do {
                    // (, line 111
                    // and, line 113
                    v_4 = limit - cursor
                    // or, line 112
                    lab1@ do {
                        v_5 = limit - cursor
                        lab2@ do {
                            // call LONG, line 111
                            if (!r_LONG()) {
                                break@lab2
                            }
                            break@lab1
                        } while (false)
                        cursor = limit - v_5
                        // literal, line 112
                        if (!eq_s_b(2, "ie")) {
                            cursor = limit - v_3
                            break@lab0
                        }
                    } while (false)
                    cursor = limit - v_4
                    // next, line 113
                    if (cursor <= limit_backward) {
                        cursor = limit - v_3
                        break@lab0
                    }
                    cursor--
                    // ], line 113
                    bra = cursor
                } while (false)
            }
            8 -> {
                // (, line 119
                if (!in_grouping_b(g_V1, 97, 246)) {
                    return false
                }
                if (!out_grouping_b(g_V1, 97, 246)) {
                    return false
                }
            }
            9 ->                             // (, line 121
                // literal, line 121
                if (!eq_s_b(1, "e")) {
                    return false
                }
        }
        // delete, line 138
        slice_del()
        // set ending_removed, line 139
        B_ending_removed = true
        return true
    }

    private fun r_other_endings(): Boolean {
        val among_var: Int
        val v_1: Int
        val v_2: Int
        val v_3: Int
        // (, line 141
        // setlimit, line 142
        v_1 = limit - cursor
        // tomark, line 142
        if (cursor < I_p2) {
            return false
        }
        cursor = I_p2
        v_2 = limit_backward
        limit_backward = cursor
        cursor = limit - v_1
        // (, line 142
        // [, line 142
        ket = cursor
        // substring, line 142
        among_var = find_among_b(a_7, 14)
        if (among_var == 0) {
            limit_backward = v_2
            return false
        }
        // ], line 142
        bra = cursor
        limit_backward = v_2
        when (among_var) {
            0 -> return false
            1 ->                             // (, line 146
                // not, line 146
            {
                v_3 = limit - cursor
                lab0@ do {
                    // literal, line 146
                    if (!eq_s_b(2, "po")) {
                        break@lab0
                    }
                    return false
                } while (false)
                cursor = limit - v_3
            }
        }
        // delete, line 151
        slice_del()
        return true
    }

    private fun r_i_plural(): Boolean {
        val v_1: Int
        val v_2: Int
        // (, line 153
        // setlimit, line 154
        v_1 = limit - cursor
        // tomark, line 154
        if (cursor < I_p1) {
            return false
        }
        cursor = I_p1
        v_2 = limit_backward
        limit_backward = cursor
        cursor = limit - v_1
        // (, line 154
        // [, line 154
        ket = cursor
        // substring, line 154
        if (find_among_b(a_8, 2) == 0) {
            limit_backward = v_2
            return false
        }
        // ], line 154
        bra = cursor
        limit_backward = v_2
        // delete, line 158
        slice_del()
        return true
    }

    private fun r_t_plural(): Boolean {
        val among_var: Int
        val v_1: Int
        val v_2: Int
        val v_3: Int
        val v_4: Int
        val v_5: Int
        val v_6: Int
        // (, line 160
        // setlimit, line 161
        v_1 = limit - cursor
        // tomark, line 161
        if (cursor < I_p1) {
            return false
        }
        cursor = I_p1
        v_2 = limit_backward
        limit_backward = cursor
        cursor = limit - v_1
        // (, line 161
        // [, line 162
        ket = cursor
        // literal, line 162
        if (!eq_s_b(1, "t")) {
            limit_backward = v_2
            return false
        }
        // ], line 162
        bra = cursor
        // test, line 162
        v_3 = limit - cursor
        if (!in_grouping_b(g_V1, 97, 246)) {
            limit_backward = v_2
            return false
        }
        cursor = limit - v_3
        // delete, line 163
        slice_del()
        limit_backward = v_2
        // setlimit, line 165
        v_4 = limit - cursor
        // tomark, line 165
        if (cursor < I_p2) {
            return false
        }
        cursor = I_p2
        v_5 = limit_backward
        limit_backward = cursor
        cursor = limit - v_4
        // (, line 165
        // [, line 165
        ket = cursor
        // substring, line 165
        among_var = find_among_b(a_9, 2)
        if (among_var == 0) {
            limit_backward = v_5
            return false
        }
        // ], line 165
        bra = cursor
        limit_backward = v_5
        when (among_var) {
            0 -> return false
            1 ->                             // (, line 167
                // not, line 167
            {
                v_6 = limit - cursor
                lab0@ do {
                    // literal, line 167
                    if (!eq_s_b(2, "po")) {
                        break@lab0
                    }
                    return false
                } while (false)
                cursor = limit - v_6
            }
        }
        // delete, line 170
        slice_del()
        return true
    }

    private fun r_tidy(): Boolean {
        val v_1: Int
        val v_2: Int
        val v_3: Int
        var v_4: Int
        val v_5: Int
        val v_6: Int
        var v_7: Int
        val v_8: Int
        var v_9: Int
        // (, line 172
        // setlimit, line 173
        v_1 = limit - cursor
        // tomark, line 173
        if (cursor < I_p1) {
            return false
        }
        cursor = I_p1
        v_2 = limit_backward
        limit_backward = cursor
        cursor = limit - v_1
        // (, line 173
        // do, line 174
        v_3 = limit - cursor
        lab0@ do {
            // (, line 174
            // and, line 174
            v_4 = limit - cursor
            // call LONG, line 174
            if (!r_LONG()) {
                break@lab0
            }
            cursor = limit - v_4
            // (, line 174
            // [, line 174
            ket = cursor
            // next, line 174
            if (cursor <= limit_backward) {
                break@lab0
            }
            cursor--
            // ], line 174
            bra = cursor
            // delete, line 174
            slice_del()
        } while (false)
        cursor = limit - v_3
        // do, line 175
        v_5 = limit - cursor
        lab1@ do {
            // (, line 175
            // [, line 175
            ket = cursor
            if (!in_grouping_b(g_AEI, 97, 228)) {
                break@lab1
            }
            // ], line 175
            bra = cursor
            if (!out_grouping_b(g_V1, 97, 246)) {
                break@lab1
            }
            // delete, line 175
            slice_del()
        } while (false)
        cursor = limit - v_5
        // do, line 176
        v_6 = limit - cursor
        lab2@ do {
            // (, line 176
            // [, line 176
            ket = cursor
            // literal, line 176
            if (!eq_s_b(1, "j")) {
                break@lab2
            }
            // ], line 176
            bra = cursor
            // or, line 176
            lab3@ do {
                v_7 = limit - cursor
                lab4@ do {
                    // literal, line 176
                    if (!eq_s_b(1, "o")) {
                        break@lab4
                    }
                    break@lab3
                } while (false)
                cursor = limit - v_7
                // literal, line 176
                if (!eq_s_b(1, "u")) {
                    break@lab2
                }
            } while (false)
            // delete, line 176
            slice_del()
        } while (false)
        cursor = limit - v_6
        // do, line 177
        v_8 = limit - cursor
        lab5@ do {
            // (, line 177
            // [, line 177
            ket = cursor
            // literal, line 177
            if (!eq_s_b(1, "o")) {
                break@lab5
            }
            // ], line 177
            bra = cursor
            // literal, line 177
            if (!eq_s_b(1, "j")) {
                break@lab5
            }
            // delete, line 177
            slice_del()
        } while (false)
        cursor = limit - v_8
        limit_backward = v_2
        // goto, line 179
        golab6@ while (true) {
            v_9 = limit - cursor
            lab7@ do {
                if (!out_grouping_b(g_V1, 97, 246)) {
                    break@lab7
                }
                cursor = limit - v_9
                break@golab6
            } while (false)
            cursor = limit - v_9
            if (cursor <= limit_backward) {
                return false
            }
            cursor--
        }
        // [, line 179
        ket = cursor
        // next, line 179
        if (cursor <= limit_backward) {
            return false
        }
        cursor--
        // ], line 179
        bra = cursor
        // -> x, line 179
        S_x = slice_to(S_x)
        // name x, line 179
        if (!eq_v_b(S_x)) {
            return false
        }
        // delete, line 179
        slice_del()
        return true
    }

    override fun stem(): Boolean {
        val v_1: Int
        val v_2: Int
        val v_3: Int
        val v_4: Int
        val v_5: Int
        var v_6: Int
        val v_7: Int
        var v_8: Int
        val v_9: Int
        // (, line 183
        // do, line 185
        v_1 = cursor
        lab0@ do {
            // call mark_regions, line 185
            if (!r_mark_regions()) {
                break@lab0
            }
        } while (false)
        cursor = v_1
        // unset ending_removed, line 186
        B_ending_removed = false
        // backwards, line 187
        limit_backward = cursor
        cursor = limit
        // (, line 187
        // do, line 188
        v_2 = limit - cursor
        lab1@ do {
            // call particle_etc, line 188
            if (!r_particle_etc()) {
                break@lab1
            }
        } while (false)
        cursor = limit - v_2
        // do, line 189
        v_3 = limit - cursor
        lab2@ do {
            // call possessive, line 189
            if (!r_possessive()) {
                break@lab2
            }
        } while (false)
        cursor = limit - v_3
        // do, line 190
        v_4 = limit - cursor
        lab3@ do {
            // call case_ending, line 190
            if (!r_case_ending()) {
                break@lab3
            }
        } while (false)
        cursor = limit - v_4
        // do, line 191
        v_5 = limit - cursor
        lab4@ do {
            // call other_endings, line 191
            if (!r_other_endings()) {
                break@lab4
            }
        } while (false)
        cursor = limit - v_5
        // or, line 192
        lab5@ do {
            v_6 = limit - cursor
            lab6@ do {
                // (, line 192
                // Boolean test ending_removed, line 192
                if (!B_ending_removed) {
                    break@lab6
                }
                // do, line 192
                v_7 = limit - cursor
                lab7@ do {
                    // call i_plural, line 192
                    if (!r_i_plural()) {
                        break@lab7
                    }
                } while (false)
                cursor = limit - v_7
                break@lab5
            } while (false)
            cursor = limit - v_6
            // do, line 192
            v_8 = limit - cursor
            lab8@ do {
                // call t_plural, line 192
                if (!r_t_plural()) {
                    break@lab8
                }
            } while (false)
            cursor = limit - v_8
        } while (false)
        // do, line 193
        v_9 = limit - cursor
        lab9@ do {
            // call tidy, line 193
            if (!r_tidy()) {
                break@lab9
            }
        } while (false)
        cursor = limit - v_9
        cursor = limit_backward
        return true
    }

    override fun equals(other: Any?): Boolean {
        return other is FinnishStemmer
    }

    override fun hashCode(): Int {
        return FinnishStemmer::class.qualifiedName.hashCode()
    }

    companion object {
        private val a_0 = arrayOf(
            Among("pa", -1, 1),
            Among("sti", -1, 2),
            Among("kaan", -1, 1),
            Among("han", -1, 1),
            Among("kin", -1, 1),
            Among("h\u00E4n", -1, 1),
            Among("k\u00E4\u00E4n", -1, 1),
            Among("ko", -1, 1),
            Among("p\u00E4", -1, 1),
            Among("k\u00F6", -1, 1)
        )
        private val a_1 = arrayOf(
            Among("lla", -1, -1),
            Among("na", -1, -1),
            Among("ssa", -1, -1),
            Among("ta", -1, -1),
            Among("lta", 3, -1),
            Among("sta", 3, -1)
        )
        private val a_2 = arrayOf(
            Among("ll\u00E4", -1, -1),
            Among("n\u00E4", -1, -1),
            Among("ss\u00E4", -1, -1),
            Among("t\u00E4", -1, -1),
            Among("lt\u00E4", 3, -1),
            Among("st\u00E4", 3, -1)
        )
        private val a_3 = arrayOf(
            Among("lle", -1, -1),
            Among("ine", -1, -1)
        )
        private val a_4 = arrayOf(
            Among("nsa", -1, 3),
            Among("mme", -1, 3),
            Among("nne", -1, 3),
            Among("ni", -1, 2),
            Among("si", -1, 1),
            Among("an", -1, 4),
            Among("en", -1, 6),
            Among("\u00E4n", -1, 5),
            Among("ns\u00E4", -1, 3)
        )
        private val a_5 = arrayOf(
            Among("aa", -1, -1),
            Among("ee", -1, -1),
            Among("ii", -1, -1),
            Among("oo", -1, -1),
            Among("uu", -1, -1),
            Among("\u00E4\u00E4", -1, -1),
            Among("\u00F6\u00F6", -1, -1)
        )
        private val a_6 = arrayOf(
            Among("a", -1, 8),
            Among("lla", 0, -1),
            Among("na", 0, -1),
            Among("ssa", 0, -1),
            Among("ta", 0, -1),
            Among("lta", 4, -1),
            Among("sta", 4, -1),
            Among("tta", 4, 9),
            Among("lle", -1, -1),
            Among("ine", -1, -1),
            Among("ksi", -1, -1),
            Among("n", -1, 7),
            Among("han", 11, 1),
            Among("den", 11, -1, FinnishStemmer::r_VI),
            Among("seen", 11, -1, FinnishStemmer::r_LONG),
            Among("hen", 11, 2),
            Among("tten", 11, -1, FinnishStemmer::r_VI),
            Among("hin", 11, 3),
            Among("siin", 11, -1, FinnishStemmer::r_VI),
            Among("hon", 11, 4),
            Among("h\u00E4n", 11, 5),
            Among("h\u00F6n", 11, 6),
            Among("\u00E4", -1, 8),
            Among("ll\u00E4", 22, -1),
            Among("n\u00E4", 22, -1),
            Among("ss\u00E4", 22, -1),
            Among("t\u00E4", 22, -1),
            Among("lt\u00E4", 26, -1),
            Among("st\u00E4", 26, -1),
            Among("tt\u00E4", 26, 9)
        )
        private val a_7 = arrayOf(
            Among("eja", -1, -1),
            Among("mma", -1, 1),
            Among("imma", 1, -1),
            Among("mpa", -1, 1),
            Among("impa", 3, -1),
            Among("mmi", -1, 1),
            Among("immi", 5, -1),
            Among("mpi", -1, 1),
            Among("impi", 7, -1),
            Among("ej\u00E4", -1, -1),
            Among("mm\u00E4", -1, 1),
            Among("imm\u00E4", 10, -1),
            Among("mp\u00E4", -1, 1),
            Among("imp\u00E4", 12, -1)
        )
        private val a_8 = arrayOf(
            Among("i", -1, -1),
            Among("j", -1, -1)
        )
        private val a_9 = arrayOf(
            Among("mma", -1, 1),
            Among("imma", 0, -1)
        )
        private val g_AEI = charArrayOf(
            17.toChar(),
            1.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            8.toChar()
        )
        private val g_V1 = charArrayOf(
            17.toChar(),
            65.toChar(),
            16.toChar(),
            1.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            8.toChar(),
            0.toChar(),
            32.toChar()
        )
        private val g_V2 = charArrayOf(
            17.toChar(),
            65.toChar(),
            16.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            8.toChar(),
            0.toChar(),
            32.toChar()
        )
        private val g_particle_end = charArrayOf(
            17.toChar(),
            97.toChar(),
            24.toChar(),
            1.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            8.toChar(),
            0.toChar(),
            32.toChar()
        )
    }
}