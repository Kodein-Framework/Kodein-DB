// This file was generated automatically by the Snowball to Java compiler
package org.kodein.db.plugin.fts.stemmer

/**
 * This class was automatically generated by a Snowball to Java compiler
 * It implements the stemming algorithm defined by a snowball script.
 */
@Suppress("UNREACHABLE_CODE")
internal class HungarianStemmer : SnowballProgram() {
    private var I_p1 = 0

    private fun r_mark_regions(): Boolean {
        var v_1: Int
        var v_2: Int
        var v_3: Int
        // (, line 44
        I_p1 = limit
        // or, line 51
        lab0@ do {
            v_1 = cursor
            lab1@ do {
                // (, line 48
                if (!in_grouping(g_v, 97, 369)) {
                    break@lab1
                }
                // goto, line 48
                golab2@ while (true) {
                    v_2 = cursor
                    lab3@ do {
                        if (!out_grouping(g_v, 97, 369)) {
                            break@lab3
                        }
                        cursor = v_2
                        break@golab2
                    } while (false)
                    cursor = v_2
                    if (cursor >= limit) {
                        break@lab1
                    }
                    cursor++
                }
                // or, line 49
                lab4@ do {
                    v_3 = cursor
                    lab5@ do {
                        // among, line 49
                        if (find_among(a_0, 8) == 0) {
                            break@lab5
                        }
                        break@lab4
                    } while (false)
                    cursor = v_3
                    // next, line 49
                    if (cursor >= limit) {
                        break@lab1
                    }
                    cursor++
                } while (false)
                // setmark p1, line 50
                I_p1 = cursor
                break@lab0
            } while (false)
            cursor = v_1
            // (, line 53
            if (!out_grouping(g_v, 97, 369)) {
                return false
            }
            // gopast, line 53
            golab6@ while (true) {
                lab7@ do {
                    if (!in_grouping(g_v, 97, 369)) {
                        break@lab7
                    }
                    break@golab6
                } while (false)
                if (cursor >= limit) {
                    return false
                }
                cursor++
            }
            // setmark p1, line 53
            I_p1 = cursor
        } while (false)
        return true
    }

    private fun r_R1(): Boolean {
        return if (I_p1 > cursor) {
            false
        } else true
    }

    private fun r_v_ending(): Boolean {
        val among_var: Int
        // (, line 60
        // [, line 61
        ket = cursor
        // substring, line 61
        among_var = find_among_b(a_1, 2)
        if (among_var == 0) {
            return false
        }
        // ], line 61
        bra = cursor
        // call R1, line 61
        if (!r_R1()) {
            return false
        }
        when (among_var) {
            0 -> return false
            1 ->                             // (, line 62
                // <-, line 62
                slice_from("a")
            2 ->                             // (, line 63
                // <-, line 63
                slice_from("e")
        }
        return true
    }

    private fun r_double(): Boolean {
        val v_1: Int
        // (, line 67
        // test, line 68
        v_1 = limit - cursor
        // among, line 68
        if (find_among_b(a_2, 23) == 0) {
            return false
        }
        cursor = limit - v_1
        return true
    }

    private fun r_undouble(): Boolean {
        // (, line 72
        // next, line 73
        if (cursor <= limit_backward) {
            return false
        }
        cursor--
        // [, line 73
        ket = cursor
        // hop, line 73
        run {
            val c: Int = cursor - 1
            if (limit_backward > c || c > limit) {
                return false
            }
            cursor = c
        }
        // ], line 73
        bra = cursor
        // delete, line 73
        slice_del()
        return true
    }

    private fun r_instrum(): Boolean {
        val among_var: Int
        // (, line 76
        // [, line 77
        ket = cursor
        // substring, line 77
        among_var = find_among_b(a_3, 2)
        if (among_var == 0) {
            return false
        }
        // ], line 77
        bra = cursor
        // call R1, line 77
        if (!r_R1()) {
            return false
        }
        when (among_var) {
            0 -> return false
            1 ->                             // (, line 78
                // call double, line 78
                if (!r_double()) {
                    return false
                }
            2 ->                             // (, line 79
                // call double, line 79
                if (!r_double()) {
                    return false
                }
        }
        // delete, line 81
        slice_del()
        // call undouble, line 82
        return if (!r_undouble()) {
            false
        } else true
    }

    private fun r_case(): Boolean {
        // (, line 86
        // [, line 87
        ket = cursor
        // substring, line 87
        if (find_among_b(a_4, 44) == 0) {
            return false
        }
        // ], line 87
        bra = cursor
        // call R1, line 87
        if (!r_R1()) {
            return false
        }
        // delete, line 111
        slice_del()
        // call v_ending, line 112
        return if (!r_v_ending()) {
            false
        } else true
    }

    private fun r_case_special(): Boolean {
        val among_var: Int
        // (, line 115
        // [, line 116
        ket = cursor
        // substring, line 116
        among_var = find_among_b(a_5, 3)
        if (among_var == 0) {
            return false
        }
        // ], line 116
        bra = cursor
        // call R1, line 116
        if (!r_R1()) {
            return false
        }
        when (among_var) {
            0 -> return false
            1 ->                             // (, line 117
                // <-, line 117
                slice_from("e")
            2 ->                             // (, line 118
                // <-, line 118
                slice_from("a")
            3 ->                             // (, line 119
                // <-, line 119
                slice_from("a")
        }
        return true
    }

    private fun r_case_other(): Boolean {
        val among_var: Int
        // (, line 123
        // [, line 124
        ket = cursor
        // substring, line 124
        among_var = find_among_b(a_6, 6)
        if (among_var == 0) {
            return false
        }
        // ], line 124
        bra = cursor
        // call R1, line 124
        if (!r_R1()) {
            return false
        }
        when (among_var) {
            0 -> return false
            1 ->                             // (, line 125
                // delete, line 125
                slice_del()
            2 ->                             // (, line 126
                // delete, line 126
                slice_del()
            3 ->                             // (, line 127
                // <-, line 127
                slice_from("a")
            4 ->                             // (, line 128
                // <-, line 128
                slice_from("e")
        }
        return true
    }

    private fun r_factive(): Boolean {
        val among_var: Int
        // (, line 132
        // [, line 133
        ket = cursor
        // substring, line 133
        among_var = find_among_b(a_7, 2)
        if (among_var == 0) {
            return false
        }
        // ], line 133
        bra = cursor
        // call R1, line 133
        if (!r_R1()) {
            return false
        }
        when (among_var) {
            0 -> return false
            1 ->                             // (, line 134
                // call double, line 134
                if (!r_double()) {
                    return false
                }
            2 ->                             // (, line 135
                // call double, line 135
                if (!r_double()) {
                    return false
                }
        }
        // delete, line 137
        slice_del()
        // call undouble, line 138
        return if (!r_undouble()) {
            false
        } else true
    }

    private fun r_plural(): Boolean {
        val among_var: Int
        // (, line 141
        // [, line 142
        ket = cursor
        // substring, line 142
        among_var = find_among_b(a_8, 7)
        if (among_var == 0) {
            return false
        }
        // ], line 142
        bra = cursor
        // call R1, line 142
        if (!r_R1()) {
            return false
        }
        when (among_var) {
            0 -> return false
            1 ->                             // (, line 143
                // <-, line 143
                slice_from("a")
            2 ->                             // (, line 144
                // <-, line 144
                slice_from("e")
            3 ->                             // (, line 145
                // delete, line 145
                slice_del()
            4 ->                             // (, line 146
                // delete, line 146
                slice_del()
            5 ->                             // (, line 147
                // delete, line 147
                slice_del()
            6 ->                             // (, line 148
                // delete, line 148
                slice_del()
            7 ->                             // (, line 149
                // delete, line 149
                slice_del()
        }
        return true
    }

    private fun r_owned(): Boolean {
        val among_var: Int
        // (, line 153
        // [, line 154
        ket = cursor
        // substring, line 154
        among_var = find_among_b(a_9, 12)
        if (among_var == 0) {
            return false
        }
        // ], line 154
        bra = cursor
        // call R1, line 154
        if (!r_R1()) {
            return false
        }
        when (among_var) {
            0 -> return false
            1 ->                             // (, line 155
                // delete, line 155
                slice_del()
            2 ->                             // (, line 156
                // <-, line 156
                slice_from("e")
            3 ->                             // (, line 157
                // <-, line 157
                slice_from("a")
            4 ->                             // (, line 158
                // delete, line 158
                slice_del()
            5 ->                             // (, line 159
                // <-, line 159
                slice_from("e")
            6 ->                             // (, line 160
                // <-, line 160
                slice_from("a")
            7 ->                             // (, line 161
                // delete, line 161
                slice_del()
            8 ->                             // (, line 162
                // <-, line 162
                slice_from("e")
            9 ->                             // (, line 163
                // delete, line 163
                slice_del()
        }
        return true
    }

    private fun r_sing_owner(): Boolean {
        val among_var: Int
        // (, line 167
        // [, line 168
        ket = cursor
        // substring, line 168
        among_var = find_among_b(a_10, 31)
        if (among_var == 0) {
            return false
        }
        // ], line 168
        bra = cursor
        // call R1, line 168
        if (!r_R1()) {
            return false
        }
        when (among_var) {
            0 -> return false
            1 ->                             // (, line 169
                // delete, line 169
                slice_del()
            2 ->                             // (, line 170
                // <-, line 170
                slice_from("a")
            3 ->                             // (, line 171
                // <-, line 171
                slice_from("e")
            4 ->                             // (, line 172
                // delete, line 172
                slice_del()
            5 ->                             // (, line 173
                // <-, line 173
                slice_from("a")
            6 ->                             // (, line 174
                // <-, line 174
                slice_from("e")
            7 ->                             // (, line 175
                // delete, line 175
                slice_del()
            8 ->                             // (, line 176
                // delete, line 176
                slice_del()
            9 ->                             // (, line 177
                // delete, line 177
                slice_del()
            10 ->                             // (, line 178
                // <-, line 178
                slice_from("a")
            11 ->                             // (, line 179
                // <-, line 179
                slice_from("e")
            12 ->                             // (, line 180
                // delete, line 180
                slice_del()
            13 ->                             // (, line 181
                // delete, line 181
                slice_del()
            14 ->                             // (, line 182
                // <-, line 182
                slice_from("a")
            15 ->                             // (, line 183
                // <-, line 183
                slice_from("e")
            16 ->                             // (, line 184
                // delete, line 184
                slice_del()
            17 ->                             // (, line 185
                // delete, line 185
                slice_del()
            18 ->                             // (, line 186
                // delete, line 186
                slice_del()
            19 ->                             // (, line 187
                // <-, line 187
                slice_from("a")
            20 ->                             // (, line 188
                // <-, line 188
                slice_from("e")
        }
        return true
    }

    private fun r_plur_owner(): Boolean {
        val among_var: Int
        // (, line 192
        // [, line 193
        ket = cursor
        // substring, line 193
        among_var = find_among_b(a_11, 42)
        if (among_var == 0) {
            return false
        }
        // ], line 193
        bra = cursor
        // call R1, line 193
        if (!r_R1()) {
            return false
        }
        when (among_var) {
            0 -> return false
            1 ->                             // (, line 194
                // delete, line 194
                slice_del()
            2 ->                             // (, line 195
                // <-, line 195
                slice_from("a")
            3 ->                             // (, line 196
                // <-, line 196
                slice_from("e")
            4 ->                             // (, line 197
                // delete, line 197
                slice_del()
            5 ->                             // (, line 198
                // delete, line 198
                slice_del()
            6 ->                             // (, line 199
                // delete, line 199
                slice_del()
            7 ->                             // (, line 200
                // <-, line 200
                slice_from("a")
            8 ->                             // (, line 201
                // <-, line 201
                slice_from("e")
            9 ->                             // (, line 202
                // delete, line 202
                slice_del()
            10 ->                             // (, line 203
                // delete, line 203
                slice_del()
            11 ->                             // (, line 204
                // delete, line 204
                slice_del()
            12 ->                             // (, line 205
                // <-, line 205
                slice_from("a")
            13 ->                             // (, line 206
                // <-, line 206
                slice_from("e")
            14 ->                             // (, line 207
                // delete, line 207
                slice_del()
            15 ->                             // (, line 208
                // delete, line 208
                slice_del()
            16 ->                             // (, line 209
                // delete, line 209
                slice_del()
            17 ->                             // (, line 210
                // delete, line 210
                slice_del()
            18 ->                             // (, line 211
                // <-, line 211
                slice_from("a")
            19 ->                             // (, line 212
                // <-, line 212
                slice_from("e")
            20 ->                             // (, line 214
                // delete, line 214
                slice_del()
            21 ->                             // (, line 215
                // delete, line 215
                slice_del()
            22 ->                             // (, line 216
                // <-, line 216
                slice_from("a")
            23 ->                             // (, line 217
                // <-, line 217
                slice_from("e")
            24 ->                             // (, line 218
                // delete, line 218
                slice_del()
            25 ->                             // (, line 219
                // delete, line 219
                slice_del()
            26 ->                             // (, line 220
                // delete, line 220
                slice_del()
            27 ->                             // (, line 221
                // <-, line 221
                slice_from("a")
            28 ->                             // (, line 222
                // <-, line 222
                slice_from("e")
            29 ->                             // (, line 223
                // delete, line 223
                slice_del()
        }
        return true
    }

    override fun stem(): Boolean {
        val v_1: Int
        val v_2: Int
        val v_3: Int
        val v_4: Int
        val v_5: Int
        val v_6: Int
        val v_7: Int
        val v_8: Int
        val v_9: Int
        val v_10: Int
        // (, line 228
        // do, line 229
        v_1 = cursor
        lab0@ do {
            // call mark_regions, line 229
            if (!r_mark_regions()) {
                break@lab0
            }
        } while (false)
        cursor = v_1
        // backwards, line 230
        limit_backward = cursor
        cursor = limit
        // (, line 230
        // do, line 231
        v_2 = limit - cursor
        lab1@ do {
            // call instrum, line 231
            if (!r_instrum()) {
                break@lab1
            }
        } while (false)
        cursor = limit - v_2
        // do, line 232
        v_3 = limit - cursor
        lab2@ do {
            // call case, line 232
            if (!r_case()) {
                break@lab2
            }
        } while (false)
        cursor = limit - v_3
        // do, line 233
        v_4 = limit - cursor
        lab3@ do {
            // call case_special, line 233
            if (!r_case_special()) {
                break@lab3
            }
        } while (false)
        cursor = limit - v_4
        // do, line 234
        v_5 = limit - cursor
        lab4@ do {
            // call case_other, line 234
            if (!r_case_other()) {
                break@lab4
            }
        } while (false)
        cursor = limit - v_5
        // do, line 235
        v_6 = limit - cursor
        lab5@ do {
            // call factive, line 235
            if (!r_factive()) {
                break@lab5
            }
        } while (false)
        cursor = limit - v_6
        // do, line 236
        v_7 = limit - cursor
        lab6@ do {
            // call owned, line 236
            if (!r_owned()) {
                break@lab6
            }
        } while (false)
        cursor = limit - v_7
        // do, line 237
        v_8 = limit - cursor
        lab7@ do {
            // call sing_owner, line 237
            if (!r_sing_owner()) {
                break@lab7
            }
        } while (false)
        cursor = limit - v_8
        // do, line 238
        v_9 = limit - cursor
        lab8@ do {
            // call plur_owner, line 238
            if (!r_plur_owner()) {
                break@lab8
            }
        } while (false)
        cursor = limit - v_9
        // do, line 239
        v_10 = limit - cursor
        lab9@ do {
            // call plural, line 239
            if (!r_plural()) {
                break@lab9
            }
        } while (false)
        cursor = limit - v_10
        cursor = limit_backward
        return true
    }

    override fun equals(other: Any?): Boolean {
        return other is HungarianStemmer
    }

    override fun hashCode(): Int {
        return HungarianStemmer::class.qualifiedName.hashCode()
    }

    companion object {
        private val a_0: Array<Among> = arrayOf<Among>(
            Among("cs", -1, -1),
            Among("dzs", -1, -1),
            Among("gy", -1, -1),
            Among("ly", -1, -1),
            Among("ny", -1, -1),
            Among("sz", -1, -1),
            Among("ty", -1, -1),
            Among("zs", -1, -1)
        )
        private val a_1: Array<Among> = arrayOf<Among>(
            Among("\u00E1", -1, 1),
            Among("\u00E9", -1, 2)
        )
        private val a_2: Array<Among> = arrayOf<Among>(
            Among("bb", -1, -1),
            Among("cc", -1, -1),
            Among("dd", -1, -1),
            Among("ff", -1, -1),
            Among("gg", -1, -1),
            Among("jj", -1, -1),
            Among("kk", -1, -1),
            Among("ll", -1, -1),
            Among("mm", -1, -1),
            Among("nn", -1, -1),
            Among("pp", -1, -1),
            Among("rr", -1, -1),
            Among("ccs", -1, -1),
            Among("ss", -1, -1),
            Among("zzs", -1, -1),
            Among("tt", -1, -1),
            Among("vv", -1, -1),
            Among("ggy", -1, -1),
            Among("lly", -1, -1),
            Among("nny", -1, -1),
            Among("tty", -1, -1),
            Among("ssz", -1, -1),
            Among("zz", -1, -1)
        )
        private val a_3: Array<Among> = arrayOf<Among>(
            Among("al", -1, 1),
            Among("el", -1, 2)
        )
        private val a_4: Array<Among> = arrayOf<Among>(
            Among("ba", -1, -1),
            Among("ra", -1, -1),
            Among("be", -1, -1),
            Among("re", -1, -1),
            Among("ig", -1, -1),
            Among("nak", -1, -1),
            Among("nek", -1, -1),
            Among("val", -1, -1),
            Among("vel", -1, -1),
            Among("ul", -1, -1),
            Among("n\u00E1l", -1, -1),
            Among("n\u00E9l", -1, -1),
            Among("b\u00F3l", -1, -1),
            Among("r\u00F3l", -1, -1),
            Among("t\u00F3l", -1, -1),
            Among("\u00FCl", -1, -1),
            Among("b\u0151l", -1, -1),
            Among("r\u0151l", -1, -1),
            Among("t\u0151l", -1, -1),
            Among("n", -1, -1),
            Among("an", 19, -1),
            Among("ban", 20, -1),
            Among("en", 19, -1),
            Among("ben", 22, -1),
            Among("k\u00E9ppen", 22, -1),
            Among("on", 19, -1),
            Among("\u00F6n", 19, -1),
            Among("k\u00E9pp", -1, -1),
            Among("kor", -1, -1),
            Among("t", -1, -1),
            Among("at", 29, -1),
            Among("et", 29, -1),
            Among("k\u00E9nt", 29, -1),
            Among("ank\u00E9nt", 32, -1),
            Among("enk\u00E9nt", 32, -1),
            Among("onk\u00E9nt", 32, -1),
            Among("ot", 29, -1),
            Among("\u00E9rt", 29, -1),
            Among("\u00F6t", 29, -1),
            Among("hez", -1, -1),
            Among("hoz", -1, -1),
            Among("h\u00F6z", -1, -1),
            Among("v\u00E1", -1, -1),
            Among("v\u00E9", -1, -1)
        )
        private val a_5: Array<Among> = arrayOf<Among>(
            Among("\u00E1n", -1, 2),
            Among("\u00E9n", -1, 1),
            Among("\u00E1nk\u00E9nt", -1, 3)
        )
        private val a_6: Array<Among> = arrayOf<Among>(
            Among("stul", -1, 2),
            Among("astul", 0, 1),
            Among("\u00E1stul", 0, 3),
            Among("st\u00FCl", -1, 2),
            Among("est\u00FCl", 3, 1),
            Among("\u00E9st\u00FCl", 3, 4)
        )
        private val a_7: Array<Among> = arrayOf<Among>(
            Among("\u00E1", -1, 1),
            Among("\u00E9", -1, 2)
        )
        private val a_8: Array<Among> = arrayOf<Among>(
            Among("k", -1, 7),
            Among("ak", 0, 4),
            Among("ek", 0, 6),
            Among("ok", 0, 5),
            Among("\u00E1k", 0, 1),
            Among("\u00E9k", 0, 2),
            Among("\u00F6k", 0, 3)
        )
        private val a_9: Array<Among> = arrayOf<Among>(
            Among("\u00E9i", -1, 7),
            Among("\u00E1\u00E9i", 0, 6),
            Among("\u00E9\u00E9i", 0, 5),
            Among("\u00E9", -1, 9),
            Among("k\u00E9", 3, 4),
            Among("ak\u00E9", 4, 1),
            Among("ek\u00E9", 4, 1),
            Among("ok\u00E9", 4, 1),
            Among("\u00E1k\u00E9", 4, 3),
            Among("\u00E9k\u00E9", 4, 2),
            Among("\u00F6k\u00E9", 4, 1),
            Among("\u00E9\u00E9", 3, 8)
        )
        private val a_10: Array<Among> = arrayOf<Among>(
            Among("a", -1, 18),
            Among("ja", 0, 17),
            Among("d", -1, 16),
            Among("ad", 2, 13),
            Among("ed", 2, 13),
            Among("od", 2, 13),
            Among("\u00E1d", 2, 14),
            Among("\u00E9d", 2, 15),
            Among("\u00F6d", 2, 13),
            Among("e", -1, 18),
            Among("je", 9, 17),
            Among("nk", -1, 4),
            Among("unk", 11, 1),
            Among("\u00E1nk", 11, 2),
            Among("\u00E9nk", 11, 3),
            Among("\u00FCnk", 11, 1),
            Among("uk", -1, 8),
            Among("juk", 16, 7),
            Among("\u00E1juk", 17, 5),
            Among("\u00FCk", -1, 8),
            Among("j\u00FCk", 19, 7),
            Among("\u00E9j\u00FCk", 20, 6),
            Among("m", -1, 12),
            Among("am", 22, 9),
            Among("em", 22, 9),
            Among("om", 22, 9),
            Among("\u00E1m", 22, 10),
            Among("\u00E9m", 22, 11),
            Among("o", -1, 18),
            Among("\u00E1", -1, 19),
            Among("\u00E9", -1, 20)
        )
        private val a_11: Array<Among> = arrayOf<Among>(
            Among("id", -1, 10),
            Among("aid", 0, 9),
            Among("jaid", 1, 6),
            Among("eid", 0, 9),
            Among("jeid", 3, 6),
            Among("\u00E1id", 0, 7),
            Among("\u00E9id", 0, 8),
            Among("i", -1, 15),
            Among("ai", 7, 14),
            Among("jai", 8, 11),
            Among("ei", 7, 14),
            Among("jei", 10, 11),
            Among("\u00E1i", 7, 12),
            Among("\u00E9i", 7, 13),
            Among("itek", -1, 24),
            Among("eitek", 14, 21),
            Among("jeitek", 15, 20),
            Among("\u00E9itek", 14, 23),
            Among("ik", -1, 29),
            Among("aik", 18, 26),
            Among("jaik", 19, 25),
            Among("eik", 18, 26),
            Among("jeik", 21, 25),
            Among("\u00E1ik", 18, 27),
            Among("\u00E9ik", 18, 28),
            Among("ink", -1, 20),
            Among("aink", 25, 17),
            Among("jaink", 26, 16),
            Among("eink", 25, 17),
            Among("jeink", 28, 16),
            Among("\u00E1ink", 25, 18),
            Among("\u00E9ink", 25, 19),
            Among("aitok", -1, 21),
            Among("jaitok", 32, 20),
            Among("\u00E1itok", -1, 22),
            Among("im", -1, 5),
            Among("aim", 35, 4),
            Among("jaim", 36, 1),
            Among("eim", 35, 4),
            Among("jeim", 38, 1),
            Among("\u00E1im", 35, 2),
            Among("\u00E9im", 35, 3)
        )
        private val g_v = charArrayOf(
            17.toChar(),
            65.toChar(),
            16.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            1.toChar(),
            17.toChar(),
            36.toChar(),
            10.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            1.toChar(),
            0.toChar(),
            0.toChar(),
            0.toChar(),
            1.toChar()
        )
    }
}